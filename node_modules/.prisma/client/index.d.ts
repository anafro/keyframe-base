
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CubicBezierFunction
 * 
 */
export type CubicBezierFunction = $Result.DefaultSelection<Prisma.$CubicBezierFunctionPayload>
/**
 * Model AnimationDirection
 * 
 */
export type AnimationDirection = $Result.DefaultSelection<Prisma.$AnimationDirectionPayload>
/**
 * Model ParameterType
 * 
 */
export type ParameterType = $Result.DefaultSelection<Prisma.$ParameterTypePayload>
/**
 * Model Animation
 * 
 */
export type Animation = $Result.DefaultSelection<Prisma.$AnimationPayload>
/**
 * Model Parameter
 * 
 */
export type Parameter = $Result.DefaultSelection<Prisma.$ParameterPayload>
/**
 * Model Keyframe
 * 
 */
export type Keyframe = $Result.DefaultSelection<Prisma.$KeyframePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CubicBezierFunctions
 * const cubicBezierFunctions = await prisma.cubicBezierFunction.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CubicBezierFunctions
   * const cubicBezierFunctions = await prisma.cubicBezierFunction.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cubicBezierFunction`: Exposes CRUD operations for the **CubicBezierFunction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CubicBezierFunctions
    * const cubicBezierFunctions = await prisma.cubicBezierFunction.findMany()
    * ```
    */
  get cubicBezierFunction(): Prisma.CubicBezierFunctionDelegate<ExtArgs>;

  /**
   * `prisma.animationDirection`: Exposes CRUD operations for the **AnimationDirection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnimationDirections
    * const animationDirections = await prisma.animationDirection.findMany()
    * ```
    */
  get animationDirection(): Prisma.AnimationDirectionDelegate<ExtArgs>;

  /**
   * `prisma.parameterType`: Exposes CRUD operations for the **ParameterType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParameterTypes
    * const parameterTypes = await prisma.parameterType.findMany()
    * ```
    */
  get parameterType(): Prisma.ParameterTypeDelegate<ExtArgs>;

  /**
   * `prisma.animation`: Exposes CRUD operations for the **Animation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animations
    * const animations = await prisma.animation.findMany()
    * ```
    */
  get animation(): Prisma.AnimationDelegate<ExtArgs>;

  /**
   * `prisma.parameter`: Exposes CRUD operations for the **Parameter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parameters
    * const parameters = await prisma.parameter.findMany()
    * ```
    */
  get parameter(): Prisma.ParameterDelegate<ExtArgs>;

  /**
   * `prisma.keyframe`: Exposes CRUD operations for the **Keyframe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keyframes
    * const keyframes = await prisma.keyframe.findMany()
    * ```
    */
  get keyframe(): Prisma.KeyframeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CubicBezierFunction: 'CubicBezierFunction',
    AnimationDirection: 'AnimationDirection',
    ParameterType: 'ParameterType',
    Animation: 'Animation',
    Parameter: 'Parameter',
    Keyframe: 'Keyframe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cubicBezierFunction' | 'animationDirection' | 'parameterType' | 'animation' | 'parameter' | 'keyframe'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CubicBezierFunction: {
        payload: Prisma.$CubicBezierFunctionPayload<ExtArgs>
        fields: Prisma.CubicBezierFunctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CubicBezierFunctionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CubicBezierFunctionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          findFirst: {
            args: Prisma.CubicBezierFunctionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CubicBezierFunctionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          findMany: {
            args: Prisma.CubicBezierFunctionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>[]
          }
          create: {
            args: Prisma.CubicBezierFunctionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          createMany: {
            args: Prisma.CubicBezierFunctionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CubicBezierFunctionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          update: {
            args: Prisma.CubicBezierFunctionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          deleteMany: {
            args: Prisma.CubicBezierFunctionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CubicBezierFunctionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CubicBezierFunctionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CubicBezierFunctionPayload>
          }
          aggregate: {
            args: Prisma.CubicBezierFunctionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCubicBezierFunction>
          }
          groupBy: {
            args: Prisma.CubicBezierFunctionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CubicBezierFunctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CubicBezierFunctionCountArgs<ExtArgs>,
            result: $Utils.Optional<CubicBezierFunctionCountAggregateOutputType> | number
          }
        }
      }
      AnimationDirection: {
        payload: Prisma.$AnimationDirectionPayload<ExtArgs>
        fields: Prisma.AnimationDirectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimationDirectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimationDirectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          findFirst: {
            args: Prisma.AnimationDirectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimationDirectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          findMany: {
            args: Prisma.AnimationDirectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>[]
          }
          create: {
            args: Prisma.AnimationDirectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          createMany: {
            args: Prisma.AnimationDirectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AnimationDirectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          update: {
            args: Prisma.AnimationDirectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          deleteMany: {
            args: Prisma.AnimationDirectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AnimationDirectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AnimationDirectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationDirectionPayload>
          }
          aggregate: {
            args: Prisma.AnimationDirectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAnimationDirection>
          }
          groupBy: {
            args: Prisma.AnimationDirectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AnimationDirectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimationDirectionCountArgs<ExtArgs>,
            result: $Utils.Optional<AnimationDirectionCountAggregateOutputType> | number
          }
        }
      }
      ParameterType: {
        payload: Prisma.$ParameterTypePayload<ExtArgs>
        fields: Prisma.ParameterTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParameterTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParameterTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          findFirst: {
            args: Prisma.ParameterTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParameterTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          findMany: {
            args: Prisma.ParameterTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>[]
          }
          create: {
            args: Prisma.ParameterTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          createMany: {
            args: Prisma.ParameterTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParameterTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          update: {
            args: Prisma.ParameterTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          deleteMany: {
            args: Prisma.ParameterTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParameterTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParameterTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterTypePayload>
          }
          aggregate: {
            args: Prisma.ParameterTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParameterType>
          }
          groupBy: {
            args: Prisma.ParameterTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParameterTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParameterTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ParameterTypeCountAggregateOutputType> | number
          }
        }
      }
      Animation: {
        payload: Prisma.$AnimationPayload<ExtArgs>
        fields: Prisma.AnimationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          findFirst: {
            args: Prisma.AnimationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          findMany: {
            args: Prisma.AnimationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>[]
          }
          create: {
            args: Prisma.AnimationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          createMany: {
            args: Prisma.AnimationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AnimationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          update: {
            args: Prisma.AnimationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          deleteMany: {
            args: Prisma.AnimationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AnimationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AnimationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          aggregate: {
            args: Prisma.AnimationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAnimation>
          }
          groupBy: {
            args: Prisma.AnimationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AnimationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimationCountArgs<ExtArgs>,
            result: $Utils.Optional<AnimationCountAggregateOutputType> | number
          }
        }
      }
      Parameter: {
        payload: Prisma.$ParameterPayload<ExtArgs>
        fields: Prisma.ParameterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParameterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParameterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          findFirst: {
            args: Prisma.ParameterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParameterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          findMany: {
            args: Prisma.ParameterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>[]
          }
          create: {
            args: Prisma.ParameterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          createMany: {
            args: Prisma.ParameterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParameterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          update: {
            args: Prisma.ParameterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          deleteMany: {
            args: Prisma.ParameterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParameterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParameterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParameterPayload>
          }
          aggregate: {
            args: Prisma.ParameterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParameter>
          }
          groupBy: {
            args: Prisma.ParameterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParameterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParameterCountArgs<ExtArgs>,
            result: $Utils.Optional<ParameterCountAggregateOutputType> | number
          }
        }
      }
      Keyframe: {
        payload: Prisma.$KeyframePayload<ExtArgs>
        fields: Prisma.KeyframeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyframeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyframeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          findFirst: {
            args: Prisma.KeyframeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyframeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          findMany: {
            args: Prisma.KeyframeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>[]
          }
          create: {
            args: Prisma.KeyframeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          createMany: {
            args: Prisma.KeyframeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KeyframeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          update: {
            args: Prisma.KeyframeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          deleteMany: {
            args: Prisma.KeyframeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KeyframeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KeyframeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyframePayload>
          }
          aggregate: {
            args: Prisma.KeyframeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKeyframe>
          }
          groupBy: {
            args: Prisma.KeyframeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KeyframeGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyframeCountArgs<ExtArgs>,
            result: $Utils.Optional<KeyframeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CubicBezierFunctionCountOutputType
   */

  export type CubicBezierFunctionCountOutputType = {
    keyframes: number
  }

  export type CubicBezierFunctionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyframes?: boolean | CubicBezierFunctionCountOutputTypeCountKeyframesArgs
  }

  // Custom InputTypes

  /**
   * CubicBezierFunctionCountOutputType without action
   */
  export type CubicBezierFunctionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunctionCountOutputType
     */
    select?: CubicBezierFunctionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CubicBezierFunctionCountOutputType without action
   */
  export type CubicBezierFunctionCountOutputTypeCountKeyframesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyframeWhereInput
  }



  /**
   * Count Type ParameterTypeCountOutputType
   */

  export type ParameterTypeCountOutputType = {
    parameters: number
  }

  export type ParameterTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | ParameterTypeCountOutputTypeCountParametersArgs
  }

  // Custom InputTypes

  /**
   * ParameterTypeCountOutputType without action
   */
  export type ParameterTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterTypeCountOutputType
     */
    select?: ParameterTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParameterTypeCountOutputType without action
   */
  export type ParameterTypeCountOutputTypeCountParametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParameterWhereInput
  }



  /**
   * Count Type AnimationCountOutputType
   */

  export type AnimationCountOutputType = {
    parameters: number
    keyframes: number
  }

  export type AnimationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | AnimationCountOutputTypeCountParametersArgs
    keyframes?: boolean | AnimationCountOutputTypeCountKeyframesArgs
  }

  // Custom InputTypes

  /**
   * AnimationCountOutputType without action
   */
  export type AnimationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationCountOutputType
     */
    select?: AnimationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AnimationCountOutputType without action
   */
  export type AnimationCountOutputTypeCountParametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParameterWhereInput
  }


  /**
   * AnimationCountOutputType without action
   */
  export type AnimationCountOutputTypeCountKeyframesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyframeWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CubicBezierFunction
   */

  export type AggregateCubicBezierFunction = {
    _count: CubicBezierFunctionCountAggregateOutputType | null
    _avg: CubicBezierFunctionAvgAggregateOutputType | null
    _sum: CubicBezierFunctionSumAggregateOutputType | null
    _min: CubicBezierFunctionMinAggregateOutputType | null
    _max: CubicBezierFunctionMaxAggregateOutputType | null
  }

  export type CubicBezierFunctionAvgAggregateOutputType = {
    id: number | null
    x1: number | null
    y1: number | null
    x2: number | null
    y2: number | null
  }

  export type CubicBezierFunctionSumAggregateOutputType = {
    id: number | null
    x1: number | null
    y1: number | null
    x2: number | null
    y2: number | null
  }

  export type CubicBezierFunctionMinAggregateOutputType = {
    id: number | null
    name: string | null
    x1: number | null
    y1: number | null
    x2: number | null
    y2: number | null
  }

  export type CubicBezierFunctionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    x1: number | null
    y1: number | null
    x2: number | null
    y2: number | null
  }

  export type CubicBezierFunctionCountAggregateOutputType = {
    id: number
    name: number
    x1: number
    y1: number
    x2: number
    y2: number
    _all: number
  }


  export type CubicBezierFunctionAvgAggregateInputType = {
    id?: true
    x1?: true
    y1?: true
    x2?: true
    y2?: true
  }

  export type CubicBezierFunctionSumAggregateInputType = {
    id?: true
    x1?: true
    y1?: true
    x2?: true
    y2?: true
  }

  export type CubicBezierFunctionMinAggregateInputType = {
    id?: true
    name?: true
    x1?: true
    y1?: true
    x2?: true
    y2?: true
  }

  export type CubicBezierFunctionMaxAggregateInputType = {
    id?: true
    name?: true
    x1?: true
    y1?: true
    x2?: true
    y2?: true
  }

  export type CubicBezierFunctionCountAggregateInputType = {
    id?: true
    name?: true
    x1?: true
    y1?: true
    x2?: true
    y2?: true
    _all?: true
  }

  export type CubicBezierFunctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CubicBezierFunction to aggregate.
     */
    where?: CubicBezierFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CubicBezierFunctions to fetch.
     */
    orderBy?: CubicBezierFunctionOrderByWithRelationInput | CubicBezierFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CubicBezierFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CubicBezierFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CubicBezierFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CubicBezierFunctions
    **/
    _count?: true | CubicBezierFunctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CubicBezierFunctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CubicBezierFunctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CubicBezierFunctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CubicBezierFunctionMaxAggregateInputType
  }

  export type GetCubicBezierFunctionAggregateType<T extends CubicBezierFunctionAggregateArgs> = {
        [P in keyof T & keyof AggregateCubicBezierFunction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCubicBezierFunction[P]>
      : GetScalarType<T[P], AggregateCubicBezierFunction[P]>
  }




  export type CubicBezierFunctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CubicBezierFunctionWhereInput
    orderBy?: CubicBezierFunctionOrderByWithAggregationInput | CubicBezierFunctionOrderByWithAggregationInput[]
    by: CubicBezierFunctionScalarFieldEnum[] | CubicBezierFunctionScalarFieldEnum
    having?: CubicBezierFunctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CubicBezierFunctionCountAggregateInputType | true
    _avg?: CubicBezierFunctionAvgAggregateInputType
    _sum?: CubicBezierFunctionSumAggregateInputType
    _min?: CubicBezierFunctionMinAggregateInputType
    _max?: CubicBezierFunctionMaxAggregateInputType
  }

  export type CubicBezierFunctionGroupByOutputType = {
    id: number
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
    _count: CubicBezierFunctionCountAggregateOutputType | null
    _avg: CubicBezierFunctionAvgAggregateOutputType | null
    _sum: CubicBezierFunctionSumAggregateOutputType | null
    _min: CubicBezierFunctionMinAggregateOutputType | null
    _max: CubicBezierFunctionMaxAggregateOutputType | null
  }

  type GetCubicBezierFunctionGroupByPayload<T extends CubicBezierFunctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CubicBezierFunctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CubicBezierFunctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CubicBezierFunctionGroupByOutputType[P]>
            : GetScalarType<T[P], CubicBezierFunctionGroupByOutputType[P]>
        }
      >
    >


  export type CubicBezierFunctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    x1?: boolean
    y1?: boolean
    x2?: boolean
    y2?: boolean
    keyframes?: boolean | CubicBezierFunction$keyframesArgs<ExtArgs>
    _count?: boolean | CubicBezierFunctionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cubicBezierFunction"]>

  export type CubicBezierFunctionSelectScalar = {
    id?: boolean
    name?: boolean
    x1?: boolean
    y1?: boolean
    x2?: boolean
    y2?: boolean
  }

  export type CubicBezierFunctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyframes?: boolean | CubicBezierFunction$keyframesArgs<ExtArgs>
    _count?: boolean | CubicBezierFunctionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CubicBezierFunctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CubicBezierFunction"
    objects: {
      keyframes: Prisma.$KeyframePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      x1: number
      y1: number
      x2: number
      y2: number
    }, ExtArgs["result"]["cubicBezierFunction"]>
    composites: {}
  }


  type CubicBezierFunctionGetPayload<S extends boolean | null | undefined | CubicBezierFunctionDefaultArgs> = $Result.GetResult<Prisma.$CubicBezierFunctionPayload, S>

  type CubicBezierFunctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CubicBezierFunctionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CubicBezierFunctionCountAggregateInputType | true
    }

  export interface CubicBezierFunctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CubicBezierFunction'], meta: { name: 'CubicBezierFunction' } }
    /**
     * Find zero or one CubicBezierFunction that matches the filter.
     * @param {CubicBezierFunctionFindUniqueArgs} args - Arguments to find a CubicBezierFunction
     * @example
     * // Get one CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CubicBezierFunctionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionFindUniqueArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CubicBezierFunction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CubicBezierFunctionFindUniqueOrThrowArgs} args - Arguments to find a CubicBezierFunction
     * @example
     * // Get one CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CubicBezierFunctionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CubicBezierFunction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionFindFirstArgs} args - Arguments to find a CubicBezierFunction
     * @example
     * // Get one CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CubicBezierFunctionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionFindFirstArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CubicBezierFunction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionFindFirstOrThrowArgs} args - Arguments to find a CubicBezierFunction
     * @example
     * // Get one CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CubicBezierFunctionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CubicBezierFunctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CubicBezierFunctions
     * const cubicBezierFunctions = await prisma.cubicBezierFunction.findMany()
     * 
     * // Get first 10 CubicBezierFunctions
     * const cubicBezierFunctions = await prisma.cubicBezierFunction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cubicBezierFunctionWithIdOnly = await prisma.cubicBezierFunction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CubicBezierFunctionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CubicBezierFunction.
     * @param {CubicBezierFunctionCreateArgs} args - Arguments to create a CubicBezierFunction.
     * @example
     * // Create one CubicBezierFunction
     * const CubicBezierFunction = await prisma.cubicBezierFunction.create({
     *   data: {
     *     // ... data to create a CubicBezierFunction
     *   }
     * })
     * 
    **/
    create<T extends CubicBezierFunctionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionCreateArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CubicBezierFunctions.
     *     @param {CubicBezierFunctionCreateManyArgs} args - Arguments to create many CubicBezierFunctions.
     *     @example
     *     // Create many CubicBezierFunctions
     *     const cubicBezierFunction = await prisma.cubicBezierFunction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CubicBezierFunctionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CubicBezierFunction.
     * @param {CubicBezierFunctionDeleteArgs} args - Arguments to delete one CubicBezierFunction.
     * @example
     * // Delete one CubicBezierFunction
     * const CubicBezierFunction = await prisma.cubicBezierFunction.delete({
     *   where: {
     *     // ... filter to delete one CubicBezierFunction
     *   }
     * })
     * 
    **/
    delete<T extends CubicBezierFunctionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionDeleteArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CubicBezierFunction.
     * @param {CubicBezierFunctionUpdateArgs} args - Arguments to update one CubicBezierFunction.
     * @example
     * // Update one CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CubicBezierFunctionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionUpdateArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CubicBezierFunctions.
     * @param {CubicBezierFunctionDeleteManyArgs} args - Arguments to filter CubicBezierFunctions to delete.
     * @example
     * // Delete a few CubicBezierFunctions
     * const { count } = await prisma.cubicBezierFunction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CubicBezierFunctionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CubicBezierFunctionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CubicBezierFunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CubicBezierFunctions
     * const cubicBezierFunction = await prisma.cubicBezierFunction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CubicBezierFunctionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CubicBezierFunction.
     * @param {CubicBezierFunctionUpsertArgs} args - Arguments to update or create a CubicBezierFunction.
     * @example
     * // Update or create a CubicBezierFunction
     * const cubicBezierFunction = await prisma.cubicBezierFunction.upsert({
     *   create: {
     *     // ... data to create a CubicBezierFunction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CubicBezierFunction we want to update
     *   }
     * })
    **/
    upsert<T extends CubicBezierFunctionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CubicBezierFunctionUpsertArgs<ExtArgs>>
    ): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CubicBezierFunctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionCountArgs} args - Arguments to filter CubicBezierFunctions to count.
     * @example
     * // Count the number of CubicBezierFunctions
     * const count = await prisma.cubicBezierFunction.count({
     *   where: {
     *     // ... the filter for the CubicBezierFunctions we want to count
     *   }
     * })
    **/
    count<T extends CubicBezierFunctionCountArgs>(
      args?: Subset<T, CubicBezierFunctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CubicBezierFunctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CubicBezierFunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CubicBezierFunctionAggregateArgs>(args: Subset<T, CubicBezierFunctionAggregateArgs>): Prisma.PrismaPromise<GetCubicBezierFunctionAggregateType<T>>

    /**
     * Group by CubicBezierFunction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CubicBezierFunctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CubicBezierFunctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CubicBezierFunctionGroupByArgs['orderBy'] }
        : { orderBy?: CubicBezierFunctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CubicBezierFunctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCubicBezierFunctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CubicBezierFunction model
   */
  readonly fields: CubicBezierFunctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CubicBezierFunction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CubicBezierFunctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    keyframes<T extends CubicBezierFunction$keyframesArgs<ExtArgs> = {}>(args?: Subset<T, CubicBezierFunction$keyframesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CubicBezierFunction model
   */ 
  interface CubicBezierFunctionFieldRefs {
    readonly id: FieldRef<"CubicBezierFunction", 'Int'>
    readonly name: FieldRef<"CubicBezierFunction", 'String'>
    readonly x1: FieldRef<"CubicBezierFunction", 'Float'>
    readonly y1: FieldRef<"CubicBezierFunction", 'Float'>
    readonly x2: FieldRef<"CubicBezierFunction", 'Float'>
    readonly y2: FieldRef<"CubicBezierFunction", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * CubicBezierFunction findUnique
   */
  export type CubicBezierFunctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter, which CubicBezierFunction to fetch.
     */
    where: CubicBezierFunctionWhereUniqueInput
  }


  /**
   * CubicBezierFunction findUniqueOrThrow
   */
  export type CubicBezierFunctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter, which CubicBezierFunction to fetch.
     */
    where: CubicBezierFunctionWhereUniqueInput
  }


  /**
   * CubicBezierFunction findFirst
   */
  export type CubicBezierFunctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter, which CubicBezierFunction to fetch.
     */
    where?: CubicBezierFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CubicBezierFunctions to fetch.
     */
    orderBy?: CubicBezierFunctionOrderByWithRelationInput | CubicBezierFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CubicBezierFunctions.
     */
    cursor?: CubicBezierFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CubicBezierFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CubicBezierFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CubicBezierFunctions.
     */
    distinct?: CubicBezierFunctionScalarFieldEnum | CubicBezierFunctionScalarFieldEnum[]
  }


  /**
   * CubicBezierFunction findFirstOrThrow
   */
  export type CubicBezierFunctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter, which CubicBezierFunction to fetch.
     */
    where?: CubicBezierFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CubicBezierFunctions to fetch.
     */
    orderBy?: CubicBezierFunctionOrderByWithRelationInput | CubicBezierFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CubicBezierFunctions.
     */
    cursor?: CubicBezierFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CubicBezierFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CubicBezierFunctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CubicBezierFunctions.
     */
    distinct?: CubicBezierFunctionScalarFieldEnum | CubicBezierFunctionScalarFieldEnum[]
  }


  /**
   * CubicBezierFunction findMany
   */
  export type CubicBezierFunctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter, which CubicBezierFunctions to fetch.
     */
    where?: CubicBezierFunctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CubicBezierFunctions to fetch.
     */
    orderBy?: CubicBezierFunctionOrderByWithRelationInput | CubicBezierFunctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CubicBezierFunctions.
     */
    cursor?: CubicBezierFunctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CubicBezierFunctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CubicBezierFunctions.
     */
    skip?: number
    distinct?: CubicBezierFunctionScalarFieldEnum | CubicBezierFunctionScalarFieldEnum[]
  }


  /**
   * CubicBezierFunction create
   */
  export type CubicBezierFunctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * The data needed to create a CubicBezierFunction.
     */
    data: XOR<CubicBezierFunctionCreateInput, CubicBezierFunctionUncheckedCreateInput>
  }


  /**
   * CubicBezierFunction createMany
   */
  export type CubicBezierFunctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CubicBezierFunctions.
     */
    data: CubicBezierFunctionCreateManyInput | CubicBezierFunctionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CubicBezierFunction update
   */
  export type CubicBezierFunctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * The data needed to update a CubicBezierFunction.
     */
    data: XOR<CubicBezierFunctionUpdateInput, CubicBezierFunctionUncheckedUpdateInput>
    /**
     * Choose, which CubicBezierFunction to update.
     */
    where: CubicBezierFunctionWhereUniqueInput
  }


  /**
   * CubicBezierFunction updateMany
   */
  export type CubicBezierFunctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CubicBezierFunctions.
     */
    data: XOR<CubicBezierFunctionUpdateManyMutationInput, CubicBezierFunctionUncheckedUpdateManyInput>
    /**
     * Filter which CubicBezierFunctions to update
     */
    where?: CubicBezierFunctionWhereInput
  }


  /**
   * CubicBezierFunction upsert
   */
  export type CubicBezierFunctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * The filter to search for the CubicBezierFunction to update in case it exists.
     */
    where: CubicBezierFunctionWhereUniqueInput
    /**
     * In case the CubicBezierFunction found by the `where` argument doesn't exist, create a new CubicBezierFunction with this data.
     */
    create: XOR<CubicBezierFunctionCreateInput, CubicBezierFunctionUncheckedCreateInput>
    /**
     * In case the CubicBezierFunction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CubicBezierFunctionUpdateInput, CubicBezierFunctionUncheckedUpdateInput>
  }


  /**
   * CubicBezierFunction delete
   */
  export type CubicBezierFunctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
    /**
     * Filter which CubicBezierFunction to delete.
     */
    where: CubicBezierFunctionWhereUniqueInput
  }


  /**
   * CubicBezierFunction deleteMany
   */
  export type CubicBezierFunctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CubicBezierFunctions to delete
     */
    where?: CubicBezierFunctionWhereInput
  }


  /**
   * CubicBezierFunction.keyframes
   */
  export type CubicBezierFunction$keyframesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    where?: KeyframeWhereInput
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    cursor?: KeyframeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeyframeScalarFieldEnum | KeyframeScalarFieldEnum[]
  }


  /**
   * CubicBezierFunction without action
   */
  export type CubicBezierFunctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CubicBezierFunction
     */
    select?: CubicBezierFunctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CubicBezierFunctionInclude<ExtArgs> | null
  }



  /**
   * Model AnimationDirection
   */

  export type AggregateAnimationDirection = {
    _count: AnimationDirectionCountAggregateOutputType | null
    _avg: AnimationDirectionAvgAggregateOutputType | null
    _sum: AnimationDirectionSumAggregateOutputType | null
    _min: AnimationDirectionMinAggregateOutputType | null
    _max: AnimationDirectionMaxAggregateOutputType | null
  }

  export type AnimationDirectionAvgAggregateOutputType = {
    id: number | null
  }

  export type AnimationDirectionSumAggregateOutputType = {
    id: number | null
  }

  export type AnimationDirectionMinAggregateOutputType = {
    id: number | null
    name: string | null
    cssValue: string | null
  }

  export type AnimationDirectionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cssValue: string | null
  }

  export type AnimationDirectionCountAggregateOutputType = {
    id: number
    name: number
    cssValue: number
    _all: number
  }


  export type AnimationDirectionAvgAggregateInputType = {
    id?: true
  }

  export type AnimationDirectionSumAggregateInputType = {
    id?: true
  }

  export type AnimationDirectionMinAggregateInputType = {
    id?: true
    name?: true
    cssValue?: true
  }

  export type AnimationDirectionMaxAggregateInputType = {
    id?: true
    name?: true
    cssValue?: true
  }

  export type AnimationDirectionCountAggregateInputType = {
    id?: true
    name?: true
    cssValue?: true
    _all?: true
  }

  export type AnimationDirectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimationDirection to aggregate.
     */
    where?: AnimationDirectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimationDirections to fetch.
     */
    orderBy?: AnimationDirectionOrderByWithRelationInput | AnimationDirectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimationDirectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimationDirections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimationDirections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnimationDirections
    **/
    _count?: true | AnimationDirectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimationDirectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimationDirectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimationDirectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimationDirectionMaxAggregateInputType
  }

  export type GetAnimationDirectionAggregateType<T extends AnimationDirectionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimationDirection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimationDirection[P]>
      : GetScalarType<T[P], AggregateAnimationDirection[P]>
  }




  export type AnimationDirectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimationDirectionWhereInput
    orderBy?: AnimationDirectionOrderByWithAggregationInput | AnimationDirectionOrderByWithAggregationInput[]
    by: AnimationDirectionScalarFieldEnum[] | AnimationDirectionScalarFieldEnum
    having?: AnimationDirectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimationDirectionCountAggregateInputType | true
    _avg?: AnimationDirectionAvgAggregateInputType
    _sum?: AnimationDirectionSumAggregateInputType
    _min?: AnimationDirectionMinAggregateInputType
    _max?: AnimationDirectionMaxAggregateInputType
  }

  export type AnimationDirectionGroupByOutputType = {
    id: number
    name: string
    cssValue: string
    _count: AnimationDirectionCountAggregateOutputType | null
    _avg: AnimationDirectionAvgAggregateOutputType | null
    _sum: AnimationDirectionSumAggregateOutputType | null
    _min: AnimationDirectionMinAggregateOutputType | null
    _max: AnimationDirectionMaxAggregateOutputType | null
  }

  type GetAnimationDirectionGroupByPayload<T extends AnimationDirectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimationDirectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimationDirectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimationDirectionGroupByOutputType[P]>
            : GetScalarType<T[P], AnimationDirectionGroupByOutputType[P]>
        }
      >
    >


  export type AnimationDirectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cssValue?: boolean
  }, ExtArgs["result"]["animationDirection"]>

  export type AnimationDirectionSelectScalar = {
    id?: boolean
    name?: boolean
    cssValue?: boolean
  }


  export type $AnimationDirectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnimationDirection"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cssValue: string
    }, ExtArgs["result"]["animationDirection"]>
    composites: {}
  }


  type AnimationDirectionGetPayload<S extends boolean | null | undefined | AnimationDirectionDefaultArgs> = $Result.GetResult<Prisma.$AnimationDirectionPayload, S>

  type AnimationDirectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnimationDirectionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AnimationDirectionCountAggregateInputType | true
    }

  export interface AnimationDirectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnimationDirection'], meta: { name: 'AnimationDirection' } }
    /**
     * Find zero or one AnimationDirection that matches the filter.
     * @param {AnimationDirectionFindUniqueArgs} args - Arguments to find a AnimationDirection
     * @example
     * // Get one AnimationDirection
     * const animationDirection = await prisma.animationDirection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimationDirectionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionFindUniqueArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AnimationDirection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnimationDirectionFindUniqueOrThrowArgs} args - Arguments to find a AnimationDirection
     * @example
     * // Get one AnimationDirection
     * const animationDirection = await prisma.animationDirection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnimationDirectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AnimationDirection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionFindFirstArgs} args - Arguments to find a AnimationDirection
     * @example
     * // Get one AnimationDirection
     * const animationDirection = await prisma.animationDirection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimationDirectionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionFindFirstArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AnimationDirection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionFindFirstOrThrowArgs} args - Arguments to find a AnimationDirection
     * @example
     * // Get one AnimationDirection
     * const animationDirection = await prisma.animationDirection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnimationDirectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AnimationDirections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnimationDirections
     * const animationDirections = await prisma.animationDirection.findMany()
     * 
     * // Get first 10 AnimationDirections
     * const animationDirections = await prisma.animationDirection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animationDirectionWithIdOnly = await prisma.animationDirection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimationDirectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AnimationDirection.
     * @param {AnimationDirectionCreateArgs} args - Arguments to create a AnimationDirection.
     * @example
     * // Create one AnimationDirection
     * const AnimationDirection = await prisma.animationDirection.create({
     *   data: {
     *     // ... data to create a AnimationDirection
     *   }
     * })
     * 
    **/
    create<T extends AnimationDirectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionCreateArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AnimationDirections.
     *     @param {AnimationDirectionCreateManyArgs} args - Arguments to create many AnimationDirections.
     *     @example
     *     // Create many AnimationDirections
     *     const animationDirection = await prisma.animationDirection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnimationDirectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AnimationDirection.
     * @param {AnimationDirectionDeleteArgs} args - Arguments to delete one AnimationDirection.
     * @example
     * // Delete one AnimationDirection
     * const AnimationDirection = await prisma.animationDirection.delete({
     *   where: {
     *     // ... filter to delete one AnimationDirection
     *   }
     * })
     * 
    **/
    delete<T extends AnimationDirectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionDeleteArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AnimationDirection.
     * @param {AnimationDirectionUpdateArgs} args - Arguments to update one AnimationDirection.
     * @example
     * // Update one AnimationDirection
     * const animationDirection = await prisma.animationDirection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimationDirectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionUpdateArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AnimationDirections.
     * @param {AnimationDirectionDeleteManyArgs} args - Arguments to filter AnimationDirections to delete.
     * @example
     * // Delete a few AnimationDirections
     * const { count } = await prisma.animationDirection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimationDirectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDirectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnimationDirections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnimationDirections
     * const animationDirection = await prisma.animationDirection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimationDirectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnimationDirection.
     * @param {AnimationDirectionUpsertArgs} args - Arguments to update or create a AnimationDirection.
     * @example
     * // Update or create a AnimationDirection
     * const animationDirection = await prisma.animationDirection.upsert({
     *   create: {
     *     // ... data to create a AnimationDirection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnimationDirection we want to update
     *   }
     * })
    **/
    upsert<T extends AnimationDirectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDirectionUpsertArgs<ExtArgs>>
    ): Prisma__AnimationDirectionClient<$Result.GetResult<Prisma.$AnimationDirectionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AnimationDirections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionCountArgs} args - Arguments to filter AnimationDirections to count.
     * @example
     * // Count the number of AnimationDirections
     * const count = await prisma.animationDirection.count({
     *   where: {
     *     // ... the filter for the AnimationDirections we want to count
     *   }
     * })
    **/
    count<T extends AnimationDirectionCountArgs>(
      args?: Subset<T, AnimationDirectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimationDirectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnimationDirection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimationDirectionAggregateArgs>(args: Subset<T, AnimationDirectionAggregateArgs>): Prisma.PrismaPromise<GetAnimationDirectionAggregateType<T>>

    /**
     * Group by AnimationDirection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationDirectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimationDirectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimationDirectionGroupByArgs['orderBy'] }
        : { orderBy?: AnimationDirectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimationDirectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimationDirectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnimationDirection model
   */
  readonly fields: AnimationDirectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnimationDirection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimationDirectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AnimationDirection model
   */ 
  interface AnimationDirectionFieldRefs {
    readonly id: FieldRef<"AnimationDirection", 'Int'>
    readonly name: FieldRef<"AnimationDirection", 'String'>
    readonly cssValue: FieldRef<"AnimationDirection", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AnimationDirection findUnique
   */
  export type AnimationDirectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter, which AnimationDirection to fetch.
     */
    where: AnimationDirectionWhereUniqueInput
  }


  /**
   * AnimationDirection findUniqueOrThrow
   */
  export type AnimationDirectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter, which AnimationDirection to fetch.
     */
    where: AnimationDirectionWhereUniqueInput
  }


  /**
   * AnimationDirection findFirst
   */
  export type AnimationDirectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter, which AnimationDirection to fetch.
     */
    where?: AnimationDirectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimationDirections to fetch.
     */
    orderBy?: AnimationDirectionOrderByWithRelationInput | AnimationDirectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimationDirections.
     */
    cursor?: AnimationDirectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimationDirections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimationDirections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimationDirections.
     */
    distinct?: AnimationDirectionScalarFieldEnum | AnimationDirectionScalarFieldEnum[]
  }


  /**
   * AnimationDirection findFirstOrThrow
   */
  export type AnimationDirectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter, which AnimationDirection to fetch.
     */
    where?: AnimationDirectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimationDirections to fetch.
     */
    orderBy?: AnimationDirectionOrderByWithRelationInput | AnimationDirectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnimationDirections.
     */
    cursor?: AnimationDirectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimationDirections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimationDirections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnimationDirections.
     */
    distinct?: AnimationDirectionScalarFieldEnum | AnimationDirectionScalarFieldEnum[]
  }


  /**
   * AnimationDirection findMany
   */
  export type AnimationDirectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter, which AnimationDirections to fetch.
     */
    where?: AnimationDirectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnimationDirections to fetch.
     */
    orderBy?: AnimationDirectionOrderByWithRelationInput | AnimationDirectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnimationDirections.
     */
    cursor?: AnimationDirectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnimationDirections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnimationDirections.
     */
    skip?: number
    distinct?: AnimationDirectionScalarFieldEnum | AnimationDirectionScalarFieldEnum[]
  }


  /**
   * AnimationDirection create
   */
  export type AnimationDirectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * The data needed to create a AnimationDirection.
     */
    data: XOR<AnimationDirectionCreateInput, AnimationDirectionUncheckedCreateInput>
  }


  /**
   * AnimationDirection createMany
   */
  export type AnimationDirectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnimationDirections.
     */
    data: AnimationDirectionCreateManyInput | AnimationDirectionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AnimationDirection update
   */
  export type AnimationDirectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * The data needed to update a AnimationDirection.
     */
    data: XOR<AnimationDirectionUpdateInput, AnimationDirectionUncheckedUpdateInput>
    /**
     * Choose, which AnimationDirection to update.
     */
    where: AnimationDirectionWhereUniqueInput
  }


  /**
   * AnimationDirection updateMany
   */
  export type AnimationDirectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnimationDirections.
     */
    data: XOR<AnimationDirectionUpdateManyMutationInput, AnimationDirectionUncheckedUpdateManyInput>
    /**
     * Filter which AnimationDirections to update
     */
    where?: AnimationDirectionWhereInput
  }


  /**
   * AnimationDirection upsert
   */
  export type AnimationDirectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * The filter to search for the AnimationDirection to update in case it exists.
     */
    where: AnimationDirectionWhereUniqueInput
    /**
     * In case the AnimationDirection found by the `where` argument doesn't exist, create a new AnimationDirection with this data.
     */
    create: XOR<AnimationDirectionCreateInput, AnimationDirectionUncheckedCreateInput>
    /**
     * In case the AnimationDirection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimationDirectionUpdateInput, AnimationDirectionUncheckedUpdateInput>
  }


  /**
   * AnimationDirection delete
   */
  export type AnimationDirectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
    /**
     * Filter which AnimationDirection to delete.
     */
    where: AnimationDirectionWhereUniqueInput
  }


  /**
   * AnimationDirection deleteMany
   */
  export type AnimationDirectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnimationDirections to delete
     */
    where?: AnimationDirectionWhereInput
  }


  /**
   * AnimationDirection without action
   */
  export type AnimationDirectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnimationDirection
     */
    select?: AnimationDirectionSelect<ExtArgs> | null
  }



  /**
   * Model ParameterType
   */

  export type AggregateParameterType = {
    _count: ParameterTypeCountAggregateOutputType | null
    _avg: ParameterTypeAvgAggregateOutputType | null
    _sum: ParameterTypeSumAggregateOutputType | null
    _min: ParameterTypeMinAggregateOutputType | null
    _max: ParameterTypeMaxAggregateOutputType | null
  }

  export type ParameterTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ParameterTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ParameterTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    cssSuffix: string | null
  }

  export type ParameterTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cssSuffix: string | null
  }

  export type ParameterTypeCountAggregateOutputType = {
    id: number
    name: number
    cssSuffix: number
    _all: number
  }


  export type ParameterTypeAvgAggregateInputType = {
    id?: true
  }

  export type ParameterTypeSumAggregateInputType = {
    id?: true
  }

  export type ParameterTypeMinAggregateInputType = {
    id?: true
    name?: true
    cssSuffix?: true
  }

  export type ParameterTypeMaxAggregateInputType = {
    id?: true
    name?: true
    cssSuffix?: true
  }

  export type ParameterTypeCountAggregateInputType = {
    id?: true
    name?: true
    cssSuffix?: true
    _all?: true
  }

  export type ParameterTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParameterType to aggregate.
     */
    where?: ParameterTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParameterTypes to fetch.
     */
    orderBy?: ParameterTypeOrderByWithRelationInput | ParameterTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParameterTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParameterTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParameterTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParameterTypes
    **/
    _count?: true | ParameterTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParameterTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParameterTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParameterTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParameterTypeMaxAggregateInputType
  }

  export type GetParameterTypeAggregateType<T extends ParameterTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateParameterType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParameterType[P]>
      : GetScalarType<T[P], AggregateParameterType[P]>
  }




  export type ParameterTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParameterTypeWhereInput
    orderBy?: ParameterTypeOrderByWithAggregationInput | ParameterTypeOrderByWithAggregationInput[]
    by: ParameterTypeScalarFieldEnum[] | ParameterTypeScalarFieldEnum
    having?: ParameterTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParameterTypeCountAggregateInputType | true
    _avg?: ParameterTypeAvgAggregateInputType
    _sum?: ParameterTypeSumAggregateInputType
    _min?: ParameterTypeMinAggregateInputType
    _max?: ParameterTypeMaxAggregateInputType
  }

  export type ParameterTypeGroupByOutputType = {
    id: number
    name: string
    cssSuffix: string
    _count: ParameterTypeCountAggregateOutputType | null
    _avg: ParameterTypeAvgAggregateOutputType | null
    _sum: ParameterTypeSumAggregateOutputType | null
    _min: ParameterTypeMinAggregateOutputType | null
    _max: ParameterTypeMaxAggregateOutputType | null
  }

  type GetParameterTypeGroupByPayload<T extends ParameterTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParameterTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParameterTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParameterTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ParameterTypeGroupByOutputType[P]>
        }
      >
    >


  export type ParameterTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cssSuffix?: boolean
    parameters?: boolean | ParameterType$parametersArgs<ExtArgs>
    _count?: boolean | ParameterTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parameterType"]>

  export type ParameterTypeSelectScalar = {
    id?: boolean
    name?: boolean
    cssSuffix?: boolean
  }

  export type ParameterTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | ParameterType$parametersArgs<ExtArgs>
    _count?: boolean | ParameterTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ParameterTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParameterType"
    objects: {
      parameters: Prisma.$ParameterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cssSuffix: string
    }, ExtArgs["result"]["parameterType"]>
    composites: {}
  }


  type ParameterTypeGetPayload<S extends boolean | null | undefined | ParameterTypeDefaultArgs> = $Result.GetResult<Prisma.$ParameterTypePayload, S>

  type ParameterTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParameterTypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ParameterTypeCountAggregateInputType | true
    }

  export interface ParameterTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParameterType'], meta: { name: 'ParameterType' } }
    /**
     * Find zero or one ParameterType that matches the filter.
     * @param {ParameterTypeFindUniqueArgs} args - Arguments to find a ParameterType
     * @example
     * // Get one ParameterType
     * const parameterType = await prisma.parameterType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParameterTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ParameterType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParameterTypeFindUniqueOrThrowArgs} args - Arguments to find a ParameterType
     * @example
     * // Get one ParameterType
     * const parameterType = await prisma.parameterType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParameterTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ParameterType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeFindFirstArgs} args - Arguments to find a ParameterType
     * @example
     * // Get one ParameterType
     * const parameterType = await prisma.parameterType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParameterTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeFindFirstArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ParameterType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeFindFirstOrThrowArgs} args - Arguments to find a ParameterType
     * @example
     * // Get one ParameterType
     * const parameterType = await prisma.parameterType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParameterTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ParameterTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParameterTypes
     * const parameterTypes = await prisma.parameterType.findMany()
     * 
     * // Get first 10 ParameterTypes
     * const parameterTypes = await prisma.parameterType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parameterTypeWithIdOnly = await prisma.parameterType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParameterTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ParameterType.
     * @param {ParameterTypeCreateArgs} args - Arguments to create a ParameterType.
     * @example
     * // Create one ParameterType
     * const ParameterType = await prisma.parameterType.create({
     *   data: {
     *     // ... data to create a ParameterType
     *   }
     * })
     * 
    **/
    create<T extends ParameterTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeCreateArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ParameterTypes.
     *     @param {ParameterTypeCreateManyArgs} args - Arguments to create many ParameterTypes.
     *     @example
     *     // Create many ParameterTypes
     *     const parameterType = await prisma.parameterType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParameterTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParameterType.
     * @param {ParameterTypeDeleteArgs} args - Arguments to delete one ParameterType.
     * @example
     * // Delete one ParameterType
     * const ParameterType = await prisma.parameterType.delete({
     *   where: {
     *     // ... filter to delete one ParameterType
     *   }
     * })
     * 
    **/
    delete<T extends ParameterTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeDeleteArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ParameterType.
     * @param {ParameterTypeUpdateArgs} args - Arguments to update one ParameterType.
     * @example
     * // Update one ParameterType
     * const parameterType = await prisma.parameterType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParameterTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeUpdateArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ParameterTypes.
     * @param {ParameterTypeDeleteManyArgs} args - Arguments to filter ParameterTypes to delete.
     * @example
     * // Delete a few ParameterTypes
     * const { count } = await prisma.parameterType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParameterTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParameterTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParameterTypes
     * const parameterType = await prisma.parameterType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParameterTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParameterType.
     * @param {ParameterTypeUpsertArgs} args - Arguments to update or create a ParameterType.
     * @example
     * // Update or create a ParameterType
     * const parameterType = await prisma.parameterType.upsert({
     *   create: {
     *     // ... data to create a ParameterType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParameterType we want to update
     *   }
     * })
    **/
    upsert<T extends ParameterTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterTypeUpsertArgs<ExtArgs>>
    ): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ParameterTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeCountArgs} args - Arguments to filter ParameterTypes to count.
     * @example
     * // Count the number of ParameterTypes
     * const count = await prisma.parameterType.count({
     *   where: {
     *     // ... the filter for the ParameterTypes we want to count
     *   }
     * })
    **/
    count<T extends ParameterTypeCountArgs>(
      args?: Subset<T, ParameterTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParameterTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParameterType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParameterTypeAggregateArgs>(args: Subset<T, ParameterTypeAggregateArgs>): Prisma.PrismaPromise<GetParameterTypeAggregateType<T>>

    /**
     * Group by ParameterType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParameterTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParameterTypeGroupByArgs['orderBy'] }
        : { orderBy?: ParameterTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParameterTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParameterTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParameterType model
   */
  readonly fields: ParameterTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParameterType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParameterTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parameters<T extends ParameterType$parametersArgs<ExtArgs> = {}>(args?: Subset<T, ParameterType$parametersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ParameterType model
   */ 
  interface ParameterTypeFieldRefs {
    readonly id: FieldRef<"ParameterType", 'Int'>
    readonly name: FieldRef<"ParameterType", 'String'>
    readonly cssSuffix: FieldRef<"ParameterType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ParameterType findUnique
   */
  export type ParameterTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter, which ParameterType to fetch.
     */
    where: ParameterTypeWhereUniqueInput
  }


  /**
   * ParameterType findUniqueOrThrow
   */
  export type ParameterTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter, which ParameterType to fetch.
     */
    where: ParameterTypeWhereUniqueInput
  }


  /**
   * ParameterType findFirst
   */
  export type ParameterTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter, which ParameterType to fetch.
     */
    where?: ParameterTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParameterTypes to fetch.
     */
    orderBy?: ParameterTypeOrderByWithRelationInput | ParameterTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParameterTypes.
     */
    cursor?: ParameterTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParameterTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParameterTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParameterTypes.
     */
    distinct?: ParameterTypeScalarFieldEnum | ParameterTypeScalarFieldEnum[]
  }


  /**
   * ParameterType findFirstOrThrow
   */
  export type ParameterTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter, which ParameterType to fetch.
     */
    where?: ParameterTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParameterTypes to fetch.
     */
    orderBy?: ParameterTypeOrderByWithRelationInput | ParameterTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParameterTypes.
     */
    cursor?: ParameterTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParameterTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParameterTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParameterTypes.
     */
    distinct?: ParameterTypeScalarFieldEnum | ParameterTypeScalarFieldEnum[]
  }


  /**
   * ParameterType findMany
   */
  export type ParameterTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter, which ParameterTypes to fetch.
     */
    where?: ParameterTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParameterTypes to fetch.
     */
    orderBy?: ParameterTypeOrderByWithRelationInput | ParameterTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParameterTypes.
     */
    cursor?: ParameterTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParameterTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParameterTypes.
     */
    skip?: number
    distinct?: ParameterTypeScalarFieldEnum | ParameterTypeScalarFieldEnum[]
  }


  /**
   * ParameterType create
   */
  export type ParameterTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ParameterType.
     */
    data: XOR<ParameterTypeCreateInput, ParameterTypeUncheckedCreateInput>
  }


  /**
   * ParameterType createMany
   */
  export type ParameterTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParameterTypes.
     */
    data: ParameterTypeCreateManyInput | ParameterTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ParameterType update
   */
  export type ParameterTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ParameterType.
     */
    data: XOR<ParameterTypeUpdateInput, ParameterTypeUncheckedUpdateInput>
    /**
     * Choose, which ParameterType to update.
     */
    where: ParameterTypeWhereUniqueInput
  }


  /**
   * ParameterType updateMany
   */
  export type ParameterTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParameterTypes.
     */
    data: XOR<ParameterTypeUpdateManyMutationInput, ParameterTypeUncheckedUpdateManyInput>
    /**
     * Filter which ParameterTypes to update
     */
    where?: ParameterTypeWhereInput
  }


  /**
   * ParameterType upsert
   */
  export type ParameterTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ParameterType to update in case it exists.
     */
    where: ParameterTypeWhereUniqueInput
    /**
     * In case the ParameterType found by the `where` argument doesn't exist, create a new ParameterType with this data.
     */
    create: XOR<ParameterTypeCreateInput, ParameterTypeUncheckedCreateInput>
    /**
     * In case the ParameterType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParameterTypeUpdateInput, ParameterTypeUncheckedUpdateInput>
  }


  /**
   * ParameterType delete
   */
  export type ParameterTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
    /**
     * Filter which ParameterType to delete.
     */
    where: ParameterTypeWhereUniqueInput
  }


  /**
   * ParameterType deleteMany
   */
  export type ParameterTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParameterTypes to delete
     */
    where?: ParameterTypeWhereInput
  }


  /**
   * ParameterType.parameters
   */
  export type ParameterType$parametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    where?: ParameterWhereInput
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    cursor?: ParameterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParameterScalarFieldEnum | ParameterScalarFieldEnum[]
  }


  /**
   * ParameterType without action
   */
  export type ParameterTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParameterType
     */
    select?: ParameterTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterTypeInclude<ExtArgs> | null
  }



  /**
   * Model Animation
   */

  export type AggregateAnimation = {
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  export type AnimationAvgAggregateOutputType = {
    id: number | null
  }

  export type AnimationSumAggregateOutputType = {
    id: number | null
  }

  export type AnimationMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type AnimationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type AnimationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type AnimationAvgAggregateInputType = {
    id?: true
  }

  export type AnimationSumAggregateInputType = {
    id?: true
  }

  export type AnimationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type AnimationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type AnimationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type AnimationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animation to aggregate.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Animations
    **/
    _count?: true | AnimationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimationMaxAggregateInputType
  }

  export type GetAnimationAggregateType<T extends AnimationAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimation[P]>
      : GetScalarType<T[P], AggregateAnimation[P]>
  }




  export type AnimationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimationWhereInput
    orderBy?: AnimationOrderByWithAggregationInput | AnimationOrderByWithAggregationInput[]
    by: AnimationScalarFieldEnum[] | AnimationScalarFieldEnum
    having?: AnimationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimationCountAggregateInputType | true
    _avg?: AnimationAvgAggregateInputType
    _sum?: AnimationSumAggregateInputType
    _min?: AnimationMinAggregateInputType
    _max?: AnimationMaxAggregateInputType
  }

  export type AnimationGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  type GetAnimationGroupByPayload<T extends AnimationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimationGroupByOutputType[P]>
            : GetScalarType<T[P], AnimationGroupByOutputType[P]>
        }
      >
    >


  export type AnimationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    parameters?: boolean | Animation$parametersArgs<ExtArgs>
    keyframes?: boolean | Animation$keyframesArgs<ExtArgs>
    _count?: boolean | AnimationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animation"]>

  export type AnimationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type AnimationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | Animation$parametersArgs<ExtArgs>
    keyframes?: boolean | Animation$keyframesArgs<ExtArgs>
    _count?: boolean | AnimationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AnimationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Animation"
    objects: {
      parameters: Prisma.$ParameterPayload<ExtArgs>[]
      keyframes: Prisma.$KeyframePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["animation"]>
    composites: {}
  }


  type AnimationGetPayload<S extends boolean | null | undefined | AnimationDefaultArgs> = $Result.GetResult<Prisma.$AnimationPayload, S>

  type AnimationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnimationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AnimationCountAggregateInputType | true
    }

  export interface AnimationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Animation'], meta: { name: 'Animation' } }
    /**
     * Find zero or one Animation that matches the filter.
     * @param {AnimationFindUniqueArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationFindUniqueArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Animation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnimationFindUniqueOrThrowArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnimationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Animation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindFirstArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationFindFirstArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Animation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindFirstOrThrowArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnimationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Animations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animations
     * const animations = await prisma.animation.findMany()
     * 
     * // Get first 10 Animations
     * const animations = await prisma.animation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animationWithIdOnly = await prisma.animation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Animation.
     * @param {AnimationCreateArgs} args - Arguments to create a Animation.
     * @example
     * // Create one Animation
     * const Animation = await prisma.animation.create({
     *   data: {
     *     // ... data to create a Animation
     *   }
     * })
     * 
    **/
    create<T extends AnimationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationCreateArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Animations.
     *     @param {AnimationCreateManyArgs} args - Arguments to create many Animations.
     *     @example
     *     // Create many Animations
     *     const animation = await prisma.animation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnimationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Animation.
     * @param {AnimationDeleteArgs} args - Arguments to delete one Animation.
     * @example
     * // Delete one Animation
     * const Animation = await prisma.animation.delete({
     *   where: {
     *     // ... filter to delete one Animation
     *   }
     * })
     * 
    **/
    delete<T extends AnimationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationDeleteArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Animation.
     * @param {AnimationUpdateArgs} args - Arguments to update one Animation.
     * @example
     * // Update one Animation
     * const animation = await prisma.animation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationUpdateArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Animations.
     * @param {AnimationDeleteManyArgs} args - Arguments to filter Animations to delete.
     * @example
     * // Delete a few Animations
     * const { count } = await prisma.animation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnimationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animations
     * const animation = await prisma.animation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Animation.
     * @param {AnimationUpsertArgs} args - Arguments to update or create a Animation.
     * @example
     * // Update or create a Animation
     * const animation = await prisma.animation.upsert({
     *   create: {
     *     // ... data to create a Animation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animation we want to update
     *   }
     * })
    **/
    upsert<T extends AnimationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AnimationUpsertArgs<ExtArgs>>
    ): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationCountArgs} args - Arguments to filter Animations to count.
     * @example
     * // Count the number of Animations
     * const count = await prisma.animation.count({
     *   where: {
     *     // ... the filter for the Animations we want to count
     *   }
     * })
    **/
    count<T extends AnimationCountArgs>(
      args?: Subset<T, AnimationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimationAggregateArgs>(args: Subset<T, AnimationAggregateArgs>): Prisma.PrismaPromise<GetAnimationAggregateType<T>>

    /**
     * Group by Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimationGroupByArgs['orderBy'] }
        : { orderBy?: AnimationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Animation model
   */
  readonly fields: AnimationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Animation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parameters<T extends Animation$parametersArgs<ExtArgs> = {}>(args?: Subset<T, Animation$parametersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findMany'> | Null>;

    keyframes<T extends Animation$keyframesArgs<ExtArgs> = {}>(args?: Subset<T, Animation$keyframesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Animation model
   */ 
  interface AnimationFieldRefs {
    readonly id: FieldRef<"Animation", 'Int'>
    readonly name: FieldRef<"Animation", 'String'>
    readonly description: FieldRef<"Animation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Animation findUnique
   */
  export type AnimationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation findUniqueOrThrow
   */
  export type AnimationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation findFirst
   */
  export type AnimationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animations.
     */
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }


  /**
   * Animation findFirstOrThrow
   */
  export type AnimationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animations.
     */
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }


  /**
   * Animation findMany
   */
  export type AnimationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animations to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }


  /**
   * Animation create
   */
  export type AnimationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The data needed to create a Animation.
     */
    data: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
  }


  /**
   * Animation createMany
   */
  export type AnimationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Animations.
     */
    data: AnimationCreateManyInput | AnimationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Animation update
   */
  export type AnimationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The data needed to update a Animation.
     */
    data: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
    /**
     * Choose, which Animation to update.
     */
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation updateMany
   */
  export type AnimationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Animations.
     */
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyInput>
    /**
     * Filter which Animations to update
     */
    where?: AnimationWhereInput
  }


  /**
   * Animation upsert
   */
  export type AnimationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The filter to search for the Animation to update in case it exists.
     */
    where: AnimationWhereUniqueInput
    /**
     * In case the Animation found by the `where` argument doesn't exist, create a new Animation with this data.
     */
    create: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
    /**
     * In case the Animation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
  }


  /**
   * Animation delete
   */
  export type AnimationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter which Animation to delete.
     */
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation deleteMany
   */
  export type AnimationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animations to delete
     */
    where?: AnimationWhereInput
  }


  /**
   * Animation.parameters
   */
  export type Animation$parametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    where?: ParameterWhereInput
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    cursor?: ParameterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParameterScalarFieldEnum | ParameterScalarFieldEnum[]
  }


  /**
   * Animation.keyframes
   */
  export type Animation$keyframesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    where?: KeyframeWhereInput
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    cursor?: KeyframeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeyframeScalarFieldEnum | KeyframeScalarFieldEnum[]
  }


  /**
   * Animation without action
   */
  export type AnimationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimationInclude<ExtArgs> | null
  }



  /**
   * Model Parameter
   */

  export type AggregateParameter = {
    _count: ParameterCountAggregateOutputType | null
    _avg: ParameterAvgAggregateOutputType | null
    _sum: ParameterSumAggregateOutputType | null
    _min: ParameterMinAggregateOutputType | null
    _max: ParameterMaxAggregateOutputType | null
  }

  export type ParameterAvgAggregateOutputType = {
    id: number | null
    parameterTypeId: number | null
    animationId: number | null
    presetValue: number | null
    minValue: number | null
    maxValue: number | null
  }

  export type ParameterSumAggregateOutputType = {
    id: number | null
    parameterTypeId: number | null
    animationId: number | null
    presetValue: number | null
    minValue: number | null
    maxValue: number | null
  }

  export type ParameterMinAggregateOutputType = {
    id: number | null
    parameterTypeId: number | null
    animationId: number | null
    name: string | null
    variableName: string | null
    presetValue: number | null
    minValue: number | null
    maxValue: number | null
  }

  export type ParameterMaxAggregateOutputType = {
    id: number | null
    parameterTypeId: number | null
    animationId: number | null
    name: string | null
    variableName: string | null
    presetValue: number | null
    minValue: number | null
    maxValue: number | null
  }

  export type ParameterCountAggregateOutputType = {
    id: number
    parameterTypeId: number
    animationId: number
    name: number
    variableName: number
    presetValue: number
    minValue: number
    maxValue: number
    _all: number
  }


  export type ParameterAvgAggregateInputType = {
    id?: true
    parameterTypeId?: true
    animationId?: true
    presetValue?: true
    minValue?: true
    maxValue?: true
  }

  export type ParameterSumAggregateInputType = {
    id?: true
    parameterTypeId?: true
    animationId?: true
    presetValue?: true
    minValue?: true
    maxValue?: true
  }

  export type ParameterMinAggregateInputType = {
    id?: true
    parameterTypeId?: true
    animationId?: true
    name?: true
    variableName?: true
    presetValue?: true
    minValue?: true
    maxValue?: true
  }

  export type ParameterMaxAggregateInputType = {
    id?: true
    parameterTypeId?: true
    animationId?: true
    name?: true
    variableName?: true
    presetValue?: true
    minValue?: true
    maxValue?: true
  }

  export type ParameterCountAggregateInputType = {
    id?: true
    parameterTypeId?: true
    animationId?: true
    name?: true
    variableName?: true
    presetValue?: true
    minValue?: true
    maxValue?: true
    _all?: true
  }

  export type ParameterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parameter to aggregate.
     */
    where?: ParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parameters
    **/
    _count?: true | ParameterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParameterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParameterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParameterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParameterMaxAggregateInputType
  }

  export type GetParameterAggregateType<T extends ParameterAggregateArgs> = {
        [P in keyof T & keyof AggregateParameter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParameter[P]>
      : GetScalarType<T[P], AggregateParameter[P]>
  }




  export type ParameterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParameterWhereInput
    orderBy?: ParameterOrderByWithAggregationInput | ParameterOrderByWithAggregationInput[]
    by: ParameterScalarFieldEnum[] | ParameterScalarFieldEnum
    having?: ParameterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParameterCountAggregateInputType | true
    _avg?: ParameterAvgAggregateInputType
    _sum?: ParameterSumAggregateInputType
    _min?: ParameterMinAggregateInputType
    _max?: ParameterMaxAggregateInputType
  }

  export type ParameterGroupByOutputType = {
    id: number
    parameterTypeId: number
    animationId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
    _count: ParameterCountAggregateOutputType | null
    _avg: ParameterAvgAggregateOutputType | null
    _sum: ParameterSumAggregateOutputType | null
    _min: ParameterMinAggregateOutputType | null
    _max: ParameterMaxAggregateOutputType | null
  }

  type GetParameterGroupByPayload<T extends ParameterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParameterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParameterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParameterGroupByOutputType[P]>
            : GetScalarType<T[P], ParameterGroupByOutputType[P]>
        }
      >
    >


  export type ParameterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterTypeId?: boolean
    animationId?: boolean
    name?: boolean
    variableName?: boolean
    presetValue?: boolean
    minValue?: boolean
    maxValue?: boolean
    parameterType?: boolean | ParameterTypeDefaultArgs<ExtArgs>
    animation?: boolean | AnimationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parameter"]>

  export type ParameterSelectScalar = {
    id?: boolean
    parameterTypeId?: boolean
    animationId?: boolean
    name?: boolean
    variableName?: boolean
    presetValue?: boolean
    minValue?: boolean
    maxValue?: boolean
  }

  export type ParameterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameterType?: boolean | ParameterTypeDefaultArgs<ExtArgs>
    animation?: boolean | AnimationDefaultArgs<ExtArgs>
  }


  export type $ParameterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parameter"
    objects: {
      parameterType: Prisma.$ParameterTypePayload<ExtArgs>
      animation: Prisma.$AnimationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      parameterTypeId: number
      animationId: number
      name: string
      variableName: string
      presetValue: number
      minValue: number
      maxValue: number
    }, ExtArgs["result"]["parameter"]>
    composites: {}
  }


  type ParameterGetPayload<S extends boolean | null | undefined | ParameterDefaultArgs> = $Result.GetResult<Prisma.$ParameterPayload, S>

  type ParameterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParameterFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ParameterCountAggregateInputType | true
    }

  export interface ParameterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parameter'], meta: { name: 'Parameter' } }
    /**
     * Find zero or one Parameter that matches the filter.
     * @param {ParameterFindUniqueArgs} args - Arguments to find a Parameter
     * @example
     * // Get one Parameter
     * const parameter = await prisma.parameter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParameterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterFindUniqueArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Parameter that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParameterFindUniqueOrThrowArgs} args - Arguments to find a Parameter
     * @example
     * // Get one Parameter
     * const parameter = await prisma.parameter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParameterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Parameter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterFindFirstArgs} args - Arguments to find a Parameter
     * @example
     * // Get one Parameter
     * const parameter = await prisma.parameter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParameterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterFindFirstArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Parameter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterFindFirstOrThrowArgs} args - Arguments to find a Parameter
     * @example
     * // Get one Parameter
     * const parameter = await prisma.parameter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParameterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Parameters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parameters
     * const parameters = await prisma.parameter.findMany()
     * 
     * // Get first 10 Parameters
     * const parameters = await prisma.parameter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parameterWithIdOnly = await prisma.parameter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParameterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Parameter.
     * @param {ParameterCreateArgs} args - Arguments to create a Parameter.
     * @example
     * // Create one Parameter
     * const Parameter = await prisma.parameter.create({
     *   data: {
     *     // ... data to create a Parameter
     *   }
     * })
     * 
    **/
    create<T extends ParameterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterCreateArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Parameters.
     *     @param {ParameterCreateManyArgs} args - Arguments to create many Parameters.
     *     @example
     *     // Create many Parameters
     *     const parameter = await prisma.parameter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParameterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Parameter.
     * @param {ParameterDeleteArgs} args - Arguments to delete one Parameter.
     * @example
     * // Delete one Parameter
     * const Parameter = await prisma.parameter.delete({
     *   where: {
     *     // ... filter to delete one Parameter
     *   }
     * })
     * 
    **/
    delete<T extends ParameterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterDeleteArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Parameter.
     * @param {ParameterUpdateArgs} args - Arguments to update one Parameter.
     * @example
     * // Update one Parameter
     * const parameter = await prisma.parameter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParameterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterUpdateArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Parameters.
     * @param {ParameterDeleteManyArgs} args - Arguments to filter Parameters to delete.
     * @example
     * // Delete a few Parameters
     * const { count } = await prisma.parameter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParameterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParameterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parameters
     * const parameter = await prisma.parameter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParameterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parameter.
     * @param {ParameterUpsertArgs} args - Arguments to update or create a Parameter.
     * @example
     * // Update or create a Parameter
     * const parameter = await prisma.parameter.upsert({
     *   create: {
     *     // ... data to create a Parameter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parameter we want to update
     *   }
     * })
    **/
    upsert<T extends ParameterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParameterUpsertArgs<ExtArgs>>
    ): Prisma__ParameterClient<$Result.GetResult<Prisma.$ParameterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterCountArgs} args - Arguments to filter Parameters to count.
     * @example
     * // Count the number of Parameters
     * const count = await prisma.parameter.count({
     *   where: {
     *     // ... the filter for the Parameters we want to count
     *   }
     * })
    **/
    count<T extends ParameterCountArgs>(
      args?: Subset<T, ParameterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParameterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parameter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParameterAggregateArgs>(args: Subset<T, ParameterAggregateArgs>): Prisma.PrismaPromise<GetParameterAggregateType<T>>

    /**
     * Group by Parameter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParameterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParameterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParameterGroupByArgs['orderBy'] }
        : { orderBy?: ParameterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParameterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParameterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parameter model
   */
  readonly fields: ParameterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parameter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParameterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parameterType<T extends ParameterTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParameterTypeDefaultArgs<ExtArgs>>): Prisma__ParameterTypeClient<$Result.GetResult<Prisma.$ParameterTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    animation<T extends AnimationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimationDefaultArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Parameter model
   */ 
  interface ParameterFieldRefs {
    readonly id: FieldRef<"Parameter", 'Int'>
    readonly parameterTypeId: FieldRef<"Parameter", 'Int'>
    readonly animationId: FieldRef<"Parameter", 'Int'>
    readonly name: FieldRef<"Parameter", 'String'>
    readonly variableName: FieldRef<"Parameter", 'String'>
    readonly presetValue: FieldRef<"Parameter", 'Float'>
    readonly minValue: FieldRef<"Parameter", 'Float'>
    readonly maxValue: FieldRef<"Parameter", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Parameter findUnique
   */
  export type ParameterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter, which Parameter to fetch.
     */
    where: ParameterWhereUniqueInput
  }


  /**
   * Parameter findUniqueOrThrow
   */
  export type ParameterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter, which Parameter to fetch.
     */
    where: ParameterWhereUniqueInput
  }


  /**
   * Parameter findFirst
   */
  export type ParameterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter, which Parameter to fetch.
     */
    where?: ParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parameters.
     */
    cursor?: ParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parameters.
     */
    distinct?: ParameterScalarFieldEnum | ParameterScalarFieldEnum[]
  }


  /**
   * Parameter findFirstOrThrow
   */
  export type ParameterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter, which Parameter to fetch.
     */
    where?: ParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parameters.
     */
    cursor?: ParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parameters.
     */
    distinct?: ParameterScalarFieldEnum | ParameterScalarFieldEnum[]
  }


  /**
   * Parameter findMany
   */
  export type ParameterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where?: ParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParameterOrderByWithRelationInput | ParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parameters.
     */
    cursor?: ParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    distinct?: ParameterScalarFieldEnum | ParameterScalarFieldEnum[]
  }


  /**
   * Parameter create
   */
  export type ParameterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * The data needed to create a Parameter.
     */
    data: XOR<ParameterCreateInput, ParameterUncheckedCreateInput>
  }


  /**
   * Parameter createMany
   */
  export type ParameterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parameters.
     */
    data: ParameterCreateManyInput | ParameterCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Parameter update
   */
  export type ParameterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * The data needed to update a Parameter.
     */
    data: XOR<ParameterUpdateInput, ParameterUncheckedUpdateInput>
    /**
     * Choose, which Parameter to update.
     */
    where: ParameterWhereUniqueInput
  }


  /**
   * Parameter updateMany
   */
  export type ParameterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parameters.
     */
    data: XOR<ParameterUpdateManyMutationInput, ParameterUncheckedUpdateManyInput>
    /**
     * Filter which Parameters to update
     */
    where?: ParameterWhereInput
  }


  /**
   * Parameter upsert
   */
  export type ParameterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * The filter to search for the Parameter to update in case it exists.
     */
    where: ParameterWhereUniqueInput
    /**
     * In case the Parameter found by the `where` argument doesn't exist, create a new Parameter with this data.
     */
    create: XOR<ParameterCreateInput, ParameterUncheckedCreateInput>
    /**
     * In case the Parameter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParameterUpdateInput, ParameterUncheckedUpdateInput>
  }


  /**
   * Parameter delete
   */
  export type ParameterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
    /**
     * Filter which Parameter to delete.
     */
    where: ParameterWhereUniqueInput
  }


  /**
   * Parameter deleteMany
   */
  export type ParameterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parameters to delete
     */
    where?: ParameterWhereInput
  }


  /**
   * Parameter without action
   */
  export type ParameterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameter
     */
    select?: ParameterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParameterInclude<ExtArgs> | null
  }



  /**
   * Model Keyframe
   */

  export type AggregateKeyframe = {
    _count: KeyframeCountAggregateOutputType | null
    _avg: KeyframeAvgAggregateOutputType | null
    _sum: KeyframeSumAggregateOutputType | null
    _min: KeyframeMinAggregateOutputType | null
    _max: KeyframeMaxAggregateOutputType | null
  }

  export type KeyframeAvgAggregateOutputType = {
    id: number | null
    animationId: number | null
    cubicBezierFunctionId: number | null
  }

  export type KeyframeSumAggregateOutputType = {
    id: number | null
    animationId: number | null
    cubicBezierFunctionId: number | null
  }

  export type KeyframeMinAggregateOutputType = {
    id: number | null
    animationId: number | null
    cubicBezierFunctionId: number | null
  }

  export type KeyframeMaxAggregateOutputType = {
    id: number | null
    animationId: number | null
    cubicBezierFunctionId: number | null
  }

  export type KeyframeCountAggregateOutputType = {
    id: number
    animationId: number
    cubicBezierFunctionId: number
    _all: number
  }


  export type KeyframeAvgAggregateInputType = {
    id?: true
    animationId?: true
    cubicBezierFunctionId?: true
  }

  export type KeyframeSumAggregateInputType = {
    id?: true
    animationId?: true
    cubicBezierFunctionId?: true
  }

  export type KeyframeMinAggregateInputType = {
    id?: true
    animationId?: true
    cubicBezierFunctionId?: true
  }

  export type KeyframeMaxAggregateInputType = {
    id?: true
    animationId?: true
    cubicBezierFunctionId?: true
  }

  export type KeyframeCountAggregateInputType = {
    id?: true
    animationId?: true
    cubicBezierFunctionId?: true
    _all?: true
  }

  export type KeyframeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keyframe to aggregate.
     */
    where?: KeyframeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keyframes to fetch.
     */
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyframeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keyframes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keyframes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keyframes
    **/
    _count?: true | KeyframeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeyframeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeyframeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyframeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyframeMaxAggregateInputType
  }

  export type GetKeyframeAggregateType<T extends KeyframeAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyframe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyframe[P]>
      : GetScalarType<T[P], AggregateKeyframe[P]>
  }




  export type KeyframeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyframeWhereInput
    orderBy?: KeyframeOrderByWithAggregationInput | KeyframeOrderByWithAggregationInput[]
    by: KeyframeScalarFieldEnum[] | KeyframeScalarFieldEnum
    having?: KeyframeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyframeCountAggregateInputType | true
    _avg?: KeyframeAvgAggregateInputType
    _sum?: KeyframeSumAggregateInputType
    _min?: KeyframeMinAggregateInputType
    _max?: KeyframeMaxAggregateInputType
  }

  export type KeyframeGroupByOutputType = {
    id: number
    animationId: number
    cubicBezierFunctionId: number
    _count: KeyframeCountAggregateOutputType | null
    _avg: KeyframeAvgAggregateOutputType | null
    _sum: KeyframeSumAggregateOutputType | null
    _min: KeyframeMinAggregateOutputType | null
    _max: KeyframeMaxAggregateOutputType | null
  }

  type GetKeyframeGroupByPayload<T extends KeyframeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyframeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyframeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyframeGroupByOutputType[P]>
            : GetScalarType<T[P], KeyframeGroupByOutputType[P]>
        }
      >
    >


  export type KeyframeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    animationId?: boolean
    cubicBezierFunctionId?: boolean
    animation?: boolean | AnimationDefaultArgs<ExtArgs>
    cubicBezierFunction?: boolean | CubicBezierFunctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyframe"]>

  export type KeyframeSelectScalar = {
    id?: boolean
    animationId?: boolean
    cubicBezierFunctionId?: boolean
  }

  export type KeyframeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animation?: boolean | AnimationDefaultArgs<ExtArgs>
    cubicBezierFunction?: boolean | CubicBezierFunctionDefaultArgs<ExtArgs>
  }


  export type $KeyframePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Keyframe"
    objects: {
      animation: Prisma.$AnimationPayload<ExtArgs>
      cubicBezierFunction: Prisma.$CubicBezierFunctionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      animationId: number
      cubicBezierFunctionId: number
    }, ExtArgs["result"]["keyframe"]>
    composites: {}
  }


  type KeyframeGetPayload<S extends boolean | null | undefined | KeyframeDefaultArgs> = $Result.GetResult<Prisma.$KeyframePayload, S>

  type KeyframeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KeyframeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: KeyframeCountAggregateInputType | true
    }

  export interface KeyframeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Keyframe'], meta: { name: 'Keyframe' } }
    /**
     * Find zero or one Keyframe that matches the filter.
     * @param {KeyframeFindUniqueArgs} args - Arguments to find a Keyframe
     * @example
     * // Get one Keyframe
     * const keyframe = await prisma.keyframe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeyframeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeFindUniqueArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Keyframe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KeyframeFindUniqueOrThrowArgs} args - Arguments to find a Keyframe
     * @example
     * // Get one Keyframe
     * const keyframe = await prisma.keyframe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeyframeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Keyframe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeFindFirstArgs} args - Arguments to find a Keyframe
     * @example
     * // Get one Keyframe
     * const keyframe = await prisma.keyframe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeyframeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeFindFirstArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Keyframe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeFindFirstOrThrowArgs} args - Arguments to find a Keyframe
     * @example
     * // Get one Keyframe
     * const keyframe = await prisma.keyframe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeyframeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Keyframes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keyframes
     * const keyframes = await prisma.keyframe.findMany()
     * 
     * // Get first 10 Keyframes
     * const keyframes = await prisma.keyframe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyframeWithIdOnly = await prisma.keyframe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeyframeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Keyframe.
     * @param {KeyframeCreateArgs} args - Arguments to create a Keyframe.
     * @example
     * // Create one Keyframe
     * const Keyframe = await prisma.keyframe.create({
     *   data: {
     *     // ... data to create a Keyframe
     *   }
     * })
     * 
    **/
    create<T extends KeyframeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeCreateArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Keyframes.
     *     @param {KeyframeCreateManyArgs} args - Arguments to create many Keyframes.
     *     @example
     *     // Create many Keyframes
     *     const keyframe = await prisma.keyframe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeyframeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Keyframe.
     * @param {KeyframeDeleteArgs} args - Arguments to delete one Keyframe.
     * @example
     * // Delete one Keyframe
     * const Keyframe = await prisma.keyframe.delete({
     *   where: {
     *     // ... filter to delete one Keyframe
     *   }
     * })
     * 
    **/
    delete<T extends KeyframeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeDeleteArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Keyframe.
     * @param {KeyframeUpdateArgs} args - Arguments to update one Keyframe.
     * @example
     * // Update one Keyframe
     * const keyframe = await prisma.keyframe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeyframeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeUpdateArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Keyframes.
     * @param {KeyframeDeleteManyArgs} args - Arguments to filter Keyframes to delete.
     * @example
     * // Delete a few Keyframes
     * const { count } = await prisma.keyframe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeyframeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyframeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keyframes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keyframes
     * const keyframe = await prisma.keyframe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeyframeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Keyframe.
     * @param {KeyframeUpsertArgs} args - Arguments to update or create a Keyframe.
     * @example
     * // Update or create a Keyframe
     * const keyframe = await prisma.keyframe.upsert({
     *   create: {
     *     // ... data to create a Keyframe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyframe we want to update
     *   }
     * })
    **/
    upsert<T extends KeyframeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KeyframeUpsertArgs<ExtArgs>>
    ): Prisma__KeyframeClient<$Result.GetResult<Prisma.$KeyframePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Keyframes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeCountArgs} args - Arguments to filter Keyframes to count.
     * @example
     * // Count the number of Keyframes
     * const count = await prisma.keyframe.count({
     *   where: {
     *     // ... the filter for the Keyframes we want to count
     *   }
     * })
    **/
    count<T extends KeyframeCountArgs>(
      args?: Subset<T, KeyframeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyframeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyframe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyframeAggregateArgs>(args: Subset<T, KeyframeAggregateArgs>): Prisma.PrismaPromise<GetKeyframeAggregateType<T>>

    /**
     * Group by Keyframe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyframeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyframeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyframeGroupByArgs['orderBy'] }
        : { orderBy?: KeyframeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyframeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyframeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Keyframe model
   */
  readonly fields: KeyframeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyframe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyframeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    animation<T extends AnimationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnimationDefaultArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cubicBezierFunction<T extends CubicBezierFunctionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CubicBezierFunctionDefaultArgs<ExtArgs>>): Prisma__CubicBezierFunctionClient<$Result.GetResult<Prisma.$CubicBezierFunctionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Keyframe model
   */ 
  interface KeyframeFieldRefs {
    readonly id: FieldRef<"Keyframe", 'Int'>
    readonly animationId: FieldRef<"Keyframe", 'Int'>
    readonly cubicBezierFunctionId: FieldRef<"Keyframe", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Keyframe findUnique
   */
  export type KeyframeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter, which Keyframe to fetch.
     */
    where: KeyframeWhereUniqueInput
  }


  /**
   * Keyframe findUniqueOrThrow
   */
  export type KeyframeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter, which Keyframe to fetch.
     */
    where: KeyframeWhereUniqueInput
  }


  /**
   * Keyframe findFirst
   */
  export type KeyframeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter, which Keyframe to fetch.
     */
    where?: KeyframeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keyframes to fetch.
     */
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keyframes.
     */
    cursor?: KeyframeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keyframes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keyframes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keyframes.
     */
    distinct?: KeyframeScalarFieldEnum | KeyframeScalarFieldEnum[]
  }


  /**
   * Keyframe findFirstOrThrow
   */
  export type KeyframeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter, which Keyframe to fetch.
     */
    where?: KeyframeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keyframes to fetch.
     */
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keyframes.
     */
    cursor?: KeyframeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keyframes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keyframes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keyframes.
     */
    distinct?: KeyframeScalarFieldEnum | KeyframeScalarFieldEnum[]
  }


  /**
   * Keyframe findMany
   */
  export type KeyframeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter, which Keyframes to fetch.
     */
    where?: KeyframeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keyframes to fetch.
     */
    orderBy?: KeyframeOrderByWithRelationInput | KeyframeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keyframes.
     */
    cursor?: KeyframeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keyframes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keyframes.
     */
    skip?: number
    distinct?: KeyframeScalarFieldEnum | KeyframeScalarFieldEnum[]
  }


  /**
   * Keyframe create
   */
  export type KeyframeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * The data needed to create a Keyframe.
     */
    data: XOR<KeyframeCreateInput, KeyframeUncheckedCreateInput>
  }


  /**
   * Keyframe createMany
   */
  export type KeyframeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keyframes.
     */
    data: KeyframeCreateManyInput | KeyframeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Keyframe update
   */
  export type KeyframeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * The data needed to update a Keyframe.
     */
    data: XOR<KeyframeUpdateInput, KeyframeUncheckedUpdateInput>
    /**
     * Choose, which Keyframe to update.
     */
    where: KeyframeWhereUniqueInput
  }


  /**
   * Keyframe updateMany
   */
  export type KeyframeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keyframes.
     */
    data: XOR<KeyframeUpdateManyMutationInput, KeyframeUncheckedUpdateManyInput>
    /**
     * Filter which Keyframes to update
     */
    where?: KeyframeWhereInput
  }


  /**
   * Keyframe upsert
   */
  export type KeyframeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * The filter to search for the Keyframe to update in case it exists.
     */
    where: KeyframeWhereUniqueInput
    /**
     * In case the Keyframe found by the `where` argument doesn't exist, create a new Keyframe with this data.
     */
    create: XOR<KeyframeCreateInput, KeyframeUncheckedCreateInput>
    /**
     * In case the Keyframe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyframeUpdateInput, KeyframeUncheckedUpdateInput>
  }


  /**
   * Keyframe delete
   */
  export type KeyframeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
    /**
     * Filter which Keyframe to delete.
     */
    where: KeyframeWhereUniqueInput
  }


  /**
   * Keyframe deleteMany
   */
  export type KeyframeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keyframes to delete
     */
    where?: KeyframeWhereInput
  }


  /**
   * Keyframe without action
   */
  export type KeyframeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyframe
     */
    select?: KeyframeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyframeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CubicBezierFunctionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    x1: 'x1',
    y1: 'y1',
    x2: 'x2',
    y2: 'y2'
  };

  export type CubicBezierFunctionScalarFieldEnum = (typeof CubicBezierFunctionScalarFieldEnum)[keyof typeof CubicBezierFunctionScalarFieldEnum]


  export const AnimationDirectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cssValue: 'cssValue'
  };

  export type AnimationDirectionScalarFieldEnum = (typeof AnimationDirectionScalarFieldEnum)[keyof typeof AnimationDirectionScalarFieldEnum]


  export const ParameterTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cssSuffix: 'cssSuffix'
  };

  export type ParameterTypeScalarFieldEnum = (typeof ParameterTypeScalarFieldEnum)[keyof typeof ParameterTypeScalarFieldEnum]


  export const AnimationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type AnimationScalarFieldEnum = (typeof AnimationScalarFieldEnum)[keyof typeof AnimationScalarFieldEnum]


  export const ParameterScalarFieldEnum: {
    id: 'id',
    parameterTypeId: 'parameterTypeId',
    animationId: 'animationId',
    name: 'name',
    variableName: 'variableName',
    presetValue: 'presetValue',
    minValue: 'minValue',
    maxValue: 'maxValue'
  };

  export type ParameterScalarFieldEnum = (typeof ParameterScalarFieldEnum)[keyof typeof ParameterScalarFieldEnum]


  export const KeyframeScalarFieldEnum: {
    id: 'id',
    animationId: 'animationId',
    cubicBezierFunctionId: 'cubicBezierFunctionId'
  };

  export type KeyframeScalarFieldEnum = (typeof KeyframeScalarFieldEnum)[keyof typeof KeyframeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CubicBezierFunctionWhereInput = {
    AND?: CubicBezierFunctionWhereInput | CubicBezierFunctionWhereInput[]
    OR?: CubicBezierFunctionWhereInput[]
    NOT?: CubicBezierFunctionWhereInput | CubicBezierFunctionWhereInput[]
    id?: IntFilter<"CubicBezierFunction"> | number
    name?: StringFilter<"CubicBezierFunction"> | string
    x1?: FloatFilter<"CubicBezierFunction"> | number
    y1?: FloatFilter<"CubicBezierFunction"> | number
    x2?: FloatFilter<"CubicBezierFunction"> | number
    y2?: FloatFilter<"CubicBezierFunction"> | number
    keyframes?: KeyframeListRelationFilter
  }

  export type CubicBezierFunctionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
    keyframes?: KeyframeOrderByRelationAggregateInput
  }

  export type CubicBezierFunctionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CubicBezierFunctionWhereInput | CubicBezierFunctionWhereInput[]
    OR?: CubicBezierFunctionWhereInput[]
    NOT?: CubicBezierFunctionWhereInput | CubicBezierFunctionWhereInput[]
    x1?: FloatFilter<"CubicBezierFunction"> | number
    y1?: FloatFilter<"CubicBezierFunction"> | number
    x2?: FloatFilter<"CubicBezierFunction"> | number
    y2?: FloatFilter<"CubicBezierFunction"> | number
    keyframes?: KeyframeListRelationFilter
  }, "id" | "name">

  export type CubicBezierFunctionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
    _count?: CubicBezierFunctionCountOrderByAggregateInput
    _avg?: CubicBezierFunctionAvgOrderByAggregateInput
    _max?: CubicBezierFunctionMaxOrderByAggregateInput
    _min?: CubicBezierFunctionMinOrderByAggregateInput
    _sum?: CubicBezierFunctionSumOrderByAggregateInput
  }

  export type CubicBezierFunctionScalarWhereWithAggregatesInput = {
    AND?: CubicBezierFunctionScalarWhereWithAggregatesInput | CubicBezierFunctionScalarWhereWithAggregatesInput[]
    OR?: CubicBezierFunctionScalarWhereWithAggregatesInput[]
    NOT?: CubicBezierFunctionScalarWhereWithAggregatesInput | CubicBezierFunctionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CubicBezierFunction"> | number
    name?: StringWithAggregatesFilter<"CubicBezierFunction"> | string
    x1?: FloatWithAggregatesFilter<"CubicBezierFunction"> | number
    y1?: FloatWithAggregatesFilter<"CubicBezierFunction"> | number
    x2?: FloatWithAggregatesFilter<"CubicBezierFunction"> | number
    y2?: FloatWithAggregatesFilter<"CubicBezierFunction"> | number
  }

  export type AnimationDirectionWhereInput = {
    AND?: AnimationDirectionWhereInput | AnimationDirectionWhereInput[]
    OR?: AnimationDirectionWhereInput[]
    NOT?: AnimationDirectionWhereInput | AnimationDirectionWhereInput[]
    id?: IntFilter<"AnimationDirection"> | number
    name?: StringFilter<"AnimationDirection"> | string
    cssValue?: StringFilter<"AnimationDirection"> | string
  }

  export type AnimationDirectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cssValue?: SortOrder
  }

  export type AnimationDirectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    cssValue?: string
    AND?: AnimationDirectionWhereInput | AnimationDirectionWhereInput[]
    OR?: AnimationDirectionWhereInput[]
    NOT?: AnimationDirectionWhereInput | AnimationDirectionWhereInput[]
  }, "id" | "name" | "cssValue">

  export type AnimationDirectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cssValue?: SortOrder
    _count?: AnimationDirectionCountOrderByAggregateInput
    _avg?: AnimationDirectionAvgOrderByAggregateInput
    _max?: AnimationDirectionMaxOrderByAggregateInput
    _min?: AnimationDirectionMinOrderByAggregateInput
    _sum?: AnimationDirectionSumOrderByAggregateInput
  }

  export type AnimationDirectionScalarWhereWithAggregatesInput = {
    AND?: AnimationDirectionScalarWhereWithAggregatesInput | AnimationDirectionScalarWhereWithAggregatesInput[]
    OR?: AnimationDirectionScalarWhereWithAggregatesInput[]
    NOT?: AnimationDirectionScalarWhereWithAggregatesInput | AnimationDirectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnimationDirection"> | number
    name?: StringWithAggregatesFilter<"AnimationDirection"> | string
    cssValue?: StringWithAggregatesFilter<"AnimationDirection"> | string
  }

  export type ParameterTypeWhereInput = {
    AND?: ParameterTypeWhereInput | ParameterTypeWhereInput[]
    OR?: ParameterTypeWhereInput[]
    NOT?: ParameterTypeWhereInput | ParameterTypeWhereInput[]
    id?: IntFilter<"ParameterType"> | number
    name?: StringFilter<"ParameterType"> | string
    cssSuffix?: StringFilter<"ParameterType"> | string
    parameters?: ParameterListRelationFilter
  }

  export type ParameterTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cssSuffix?: SortOrder
    parameters?: ParameterOrderByRelationAggregateInput
  }

  export type ParameterTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    cssSuffix?: string
    AND?: ParameterTypeWhereInput | ParameterTypeWhereInput[]
    OR?: ParameterTypeWhereInput[]
    NOT?: ParameterTypeWhereInput | ParameterTypeWhereInput[]
    parameters?: ParameterListRelationFilter
  }, "id" | "name" | "cssSuffix">

  export type ParameterTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cssSuffix?: SortOrder
    _count?: ParameterTypeCountOrderByAggregateInput
    _avg?: ParameterTypeAvgOrderByAggregateInput
    _max?: ParameterTypeMaxOrderByAggregateInput
    _min?: ParameterTypeMinOrderByAggregateInput
    _sum?: ParameterTypeSumOrderByAggregateInput
  }

  export type ParameterTypeScalarWhereWithAggregatesInput = {
    AND?: ParameterTypeScalarWhereWithAggregatesInput | ParameterTypeScalarWhereWithAggregatesInput[]
    OR?: ParameterTypeScalarWhereWithAggregatesInput[]
    NOT?: ParameterTypeScalarWhereWithAggregatesInput | ParameterTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParameterType"> | number
    name?: StringWithAggregatesFilter<"ParameterType"> | string
    cssSuffix?: StringWithAggregatesFilter<"ParameterType"> | string
  }

  export type AnimationWhereInput = {
    AND?: AnimationWhereInput | AnimationWhereInput[]
    OR?: AnimationWhereInput[]
    NOT?: AnimationWhereInput | AnimationWhereInput[]
    id?: IntFilter<"Animation"> | number
    name?: StringFilter<"Animation"> | string
    description?: StringFilter<"Animation"> | string
    parameters?: ParameterListRelationFilter
    keyframes?: KeyframeListRelationFilter
  }

  export type AnimationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parameters?: ParameterOrderByRelationAggregateInput
    keyframes?: KeyframeOrderByRelationAggregateInput
  }

  export type AnimationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: AnimationWhereInput | AnimationWhereInput[]
    OR?: AnimationWhereInput[]
    NOT?: AnimationWhereInput | AnimationWhereInput[]
    description?: StringFilter<"Animation"> | string
    parameters?: ParameterListRelationFilter
    keyframes?: KeyframeListRelationFilter
  }, "id" | "name">

  export type AnimationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: AnimationCountOrderByAggregateInput
    _avg?: AnimationAvgOrderByAggregateInput
    _max?: AnimationMaxOrderByAggregateInput
    _min?: AnimationMinOrderByAggregateInput
    _sum?: AnimationSumOrderByAggregateInput
  }

  export type AnimationScalarWhereWithAggregatesInput = {
    AND?: AnimationScalarWhereWithAggregatesInput | AnimationScalarWhereWithAggregatesInput[]
    OR?: AnimationScalarWhereWithAggregatesInput[]
    NOT?: AnimationScalarWhereWithAggregatesInput | AnimationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Animation"> | number
    name?: StringWithAggregatesFilter<"Animation"> | string
    description?: StringWithAggregatesFilter<"Animation"> | string
  }

  export type ParameterWhereInput = {
    AND?: ParameterWhereInput | ParameterWhereInput[]
    OR?: ParameterWhereInput[]
    NOT?: ParameterWhereInput | ParameterWhereInput[]
    id?: IntFilter<"Parameter"> | number
    parameterTypeId?: IntFilter<"Parameter"> | number
    animationId?: IntFilter<"Parameter"> | number
    name?: StringFilter<"Parameter"> | string
    variableName?: StringFilter<"Parameter"> | string
    presetValue?: FloatFilter<"Parameter"> | number
    minValue?: FloatFilter<"Parameter"> | number
    maxValue?: FloatFilter<"Parameter"> | number
    parameterType?: XOR<ParameterTypeRelationFilter, ParameterTypeWhereInput>
    animation?: XOR<AnimationRelationFilter, AnimationWhereInput>
  }

  export type ParameterOrderByWithRelationInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    name?: SortOrder
    variableName?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
    parameterType?: ParameterTypeOrderByWithRelationInput
    animation?: AnimationOrderByWithRelationInput
  }

  export type ParameterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    variableName?: string
    AND?: ParameterWhereInput | ParameterWhereInput[]
    OR?: ParameterWhereInput[]
    NOT?: ParameterWhereInput | ParameterWhereInput[]
    parameterTypeId?: IntFilter<"Parameter"> | number
    animationId?: IntFilter<"Parameter"> | number
    presetValue?: FloatFilter<"Parameter"> | number
    minValue?: FloatFilter<"Parameter"> | number
    maxValue?: FloatFilter<"Parameter"> | number
    parameterType?: XOR<ParameterTypeRelationFilter, ParameterTypeWhereInput>
    animation?: XOR<AnimationRelationFilter, AnimationWhereInput>
  }, "id" | "name" | "variableName">

  export type ParameterOrderByWithAggregationInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    name?: SortOrder
    variableName?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
    _count?: ParameterCountOrderByAggregateInput
    _avg?: ParameterAvgOrderByAggregateInput
    _max?: ParameterMaxOrderByAggregateInput
    _min?: ParameterMinOrderByAggregateInput
    _sum?: ParameterSumOrderByAggregateInput
  }

  export type ParameterScalarWhereWithAggregatesInput = {
    AND?: ParameterScalarWhereWithAggregatesInput | ParameterScalarWhereWithAggregatesInput[]
    OR?: ParameterScalarWhereWithAggregatesInput[]
    NOT?: ParameterScalarWhereWithAggregatesInput | ParameterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Parameter"> | number
    parameterTypeId?: IntWithAggregatesFilter<"Parameter"> | number
    animationId?: IntWithAggregatesFilter<"Parameter"> | number
    name?: StringWithAggregatesFilter<"Parameter"> | string
    variableName?: StringWithAggregatesFilter<"Parameter"> | string
    presetValue?: FloatWithAggregatesFilter<"Parameter"> | number
    minValue?: FloatWithAggregatesFilter<"Parameter"> | number
    maxValue?: FloatWithAggregatesFilter<"Parameter"> | number
  }

  export type KeyframeWhereInput = {
    AND?: KeyframeWhereInput | KeyframeWhereInput[]
    OR?: KeyframeWhereInput[]
    NOT?: KeyframeWhereInput | KeyframeWhereInput[]
    id?: IntFilter<"Keyframe"> | number
    animationId?: IntFilter<"Keyframe"> | number
    cubicBezierFunctionId?: IntFilter<"Keyframe"> | number
    animation?: XOR<AnimationRelationFilter, AnimationWhereInput>
    cubicBezierFunction?: XOR<CubicBezierFunctionRelationFilter, CubicBezierFunctionWhereInput>
  }

  export type KeyframeOrderByWithRelationInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
    animation?: AnimationOrderByWithRelationInput
    cubicBezierFunction?: CubicBezierFunctionOrderByWithRelationInput
  }

  export type KeyframeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KeyframeWhereInput | KeyframeWhereInput[]
    OR?: KeyframeWhereInput[]
    NOT?: KeyframeWhereInput | KeyframeWhereInput[]
    animationId?: IntFilter<"Keyframe"> | number
    cubicBezierFunctionId?: IntFilter<"Keyframe"> | number
    animation?: XOR<AnimationRelationFilter, AnimationWhereInput>
    cubicBezierFunction?: XOR<CubicBezierFunctionRelationFilter, CubicBezierFunctionWhereInput>
  }, "id">

  export type KeyframeOrderByWithAggregationInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
    _count?: KeyframeCountOrderByAggregateInput
    _avg?: KeyframeAvgOrderByAggregateInput
    _max?: KeyframeMaxOrderByAggregateInput
    _min?: KeyframeMinOrderByAggregateInput
    _sum?: KeyframeSumOrderByAggregateInput
  }

  export type KeyframeScalarWhereWithAggregatesInput = {
    AND?: KeyframeScalarWhereWithAggregatesInput | KeyframeScalarWhereWithAggregatesInput[]
    OR?: KeyframeScalarWhereWithAggregatesInput[]
    NOT?: KeyframeScalarWhereWithAggregatesInput | KeyframeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Keyframe"> | number
    animationId?: IntWithAggregatesFilter<"Keyframe"> | number
    cubicBezierFunctionId?: IntWithAggregatesFilter<"Keyframe"> | number
  }

  export type CubicBezierFunctionCreateInput = {
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
    keyframes?: KeyframeCreateNestedManyWithoutCubicBezierFunctionInput
  }

  export type CubicBezierFunctionUncheckedCreateInput = {
    id?: number
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
    keyframes?: KeyframeUncheckedCreateNestedManyWithoutCubicBezierFunctionInput
  }

  export type CubicBezierFunctionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
    keyframes?: KeyframeUpdateManyWithoutCubicBezierFunctionNestedInput
  }

  export type CubicBezierFunctionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
    keyframes?: KeyframeUncheckedUpdateManyWithoutCubicBezierFunctionNestedInput
  }

  export type CubicBezierFunctionCreateManyInput = {
    id?: number
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
  }

  export type CubicBezierFunctionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
  }

  export type CubicBezierFunctionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
  }

  export type AnimationDirectionCreateInput = {
    name: string
    cssValue: string
  }

  export type AnimationDirectionUncheckedCreateInput = {
    id?: number
    name: string
    cssValue: string
  }

  export type AnimationDirectionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cssValue?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationDirectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cssValue?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationDirectionCreateManyInput = {
    id?: number
    name: string
    cssValue: string
  }

  export type AnimationDirectionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cssValue?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationDirectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cssValue?: StringFieldUpdateOperationsInput | string
  }

  export type ParameterTypeCreateInput = {
    name: string
    cssSuffix: string
    parameters?: ParameterCreateNestedManyWithoutParameterTypeInput
  }

  export type ParameterTypeUncheckedCreateInput = {
    id?: number
    name: string
    cssSuffix: string
    parameters?: ParameterUncheckedCreateNestedManyWithoutParameterTypeInput
  }

  export type ParameterTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUpdateManyWithoutParameterTypeNestedInput
  }

  export type ParameterTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUncheckedUpdateManyWithoutParameterTypeNestedInput
  }

  export type ParameterTypeCreateManyInput = {
    id?: number
    name: string
    cssSuffix: string
  }

  export type ParameterTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
  }

  export type ParameterTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationCreateInput = {
    name: string
    description: string
    parameters?: ParameterCreateNestedManyWithoutAnimationInput
    keyframes?: KeyframeCreateNestedManyWithoutAnimationInput
  }

  export type AnimationUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    parameters?: ParameterUncheckedCreateNestedManyWithoutAnimationInput
    keyframes?: KeyframeUncheckedCreateNestedManyWithoutAnimationInput
  }

  export type AnimationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUpdateManyWithoutAnimationNestedInput
    keyframes?: KeyframeUpdateManyWithoutAnimationNestedInput
  }

  export type AnimationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUncheckedUpdateManyWithoutAnimationNestedInput
    keyframes?: KeyframeUncheckedUpdateManyWithoutAnimationNestedInput
  }

  export type AnimationCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type AnimationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ParameterCreateInput = {
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
    parameterType: ParameterTypeCreateNestedOneWithoutParametersInput
    animation: AnimationCreateNestedOneWithoutParametersInput
  }

  export type ParameterUncheckedCreateInput = {
    id?: number
    parameterTypeId: number
    animationId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type ParameterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
    parameterType?: ParameterTypeUpdateOneRequiredWithoutParametersNestedInput
    animation?: AnimationUpdateOneRequiredWithoutParametersNestedInput
  }

  export type ParameterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterTypeId?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type ParameterCreateManyInput = {
    id?: number
    parameterTypeId: number
    animationId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type ParameterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type ParameterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterTypeId?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyframeCreateInput = {
    animation: AnimationCreateNestedOneWithoutKeyframesInput
    cubicBezierFunction: CubicBezierFunctionCreateNestedOneWithoutKeyframesInput
  }

  export type KeyframeUncheckedCreateInput = {
    id?: number
    animationId: number
    cubicBezierFunctionId: number
  }

  export type KeyframeUpdateInput = {
    animation?: AnimationUpdateOneRequiredWithoutKeyframesNestedInput
    cubicBezierFunction?: CubicBezierFunctionUpdateOneRequiredWithoutKeyframesNestedInput
  }

  export type KeyframeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    cubicBezierFunctionId?: IntFieldUpdateOperationsInput | number
  }

  export type KeyframeCreateManyInput = {
    id?: number
    animationId: number
    cubicBezierFunctionId: number
  }

  export type KeyframeUpdateManyMutationInput = {

  }

  export type KeyframeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    cubicBezierFunctionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type KeyframeListRelationFilter = {
    every?: KeyframeWhereInput
    some?: KeyframeWhereInput
    none?: KeyframeWhereInput
  }

  export type KeyframeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CubicBezierFunctionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
  }

  export type CubicBezierFunctionAvgOrderByAggregateInput = {
    id?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
  }

  export type CubicBezierFunctionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
  }

  export type CubicBezierFunctionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
  }

  export type CubicBezierFunctionSumOrderByAggregateInput = {
    id?: SortOrder
    x1?: SortOrder
    y1?: SortOrder
    x2?: SortOrder
    y2?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AnimationDirectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssValue?: SortOrder
  }

  export type AnimationDirectionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnimationDirectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssValue?: SortOrder
  }

  export type AnimationDirectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssValue?: SortOrder
  }

  export type AnimationDirectionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParameterListRelationFilter = {
    every?: ParameterWhereInput
    some?: ParameterWhereInput
    none?: ParameterWhereInput
  }

  export type ParameterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParameterTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssSuffix?: SortOrder
  }

  export type ParameterTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParameterTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssSuffix?: SortOrder
  }

  export type ParameterTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cssSuffix?: SortOrder
  }

  export type ParameterTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnimationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type AnimationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnimationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type AnimationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type AnimationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParameterTypeRelationFilter = {
    is?: ParameterTypeWhereInput
    isNot?: ParameterTypeWhereInput
  }

  export type AnimationRelationFilter = {
    is?: AnimationWhereInput
    isNot?: AnimationWhereInput
  }

  export type ParameterCountOrderByAggregateInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    name?: SortOrder
    variableName?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type ParameterAvgOrderByAggregateInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type ParameterMaxOrderByAggregateInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    name?: SortOrder
    variableName?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type ParameterMinOrderByAggregateInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    name?: SortOrder
    variableName?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type ParameterSumOrderByAggregateInput = {
    id?: SortOrder
    parameterTypeId?: SortOrder
    animationId?: SortOrder
    presetValue?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type CubicBezierFunctionRelationFilter = {
    is?: CubicBezierFunctionWhereInput
    isNot?: CubicBezierFunctionWhereInput
  }

  export type KeyframeCountOrderByAggregateInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
  }

  export type KeyframeAvgOrderByAggregateInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
  }

  export type KeyframeMaxOrderByAggregateInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
  }

  export type KeyframeMinOrderByAggregateInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
  }

  export type KeyframeSumOrderByAggregateInput = {
    id?: SortOrder
    animationId?: SortOrder
    cubicBezierFunctionId?: SortOrder
  }

  export type KeyframeCreateNestedManyWithoutCubicBezierFunctionInput = {
    create?: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput> | KeyframeCreateWithoutCubicBezierFunctionInput[] | KeyframeUncheckedCreateWithoutCubicBezierFunctionInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutCubicBezierFunctionInput | KeyframeCreateOrConnectWithoutCubicBezierFunctionInput[]
    createMany?: KeyframeCreateManyCubicBezierFunctionInputEnvelope
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
  }

  export type KeyframeUncheckedCreateNestedManyWithoutCubicBezierFunctionInput = {
    create?: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput> | KeyframeCreateWithoutCubicBezierFunctionInput[] | KeyframeUncheckedCreateWithoutCubicBezierFunctionInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutCubicBezierFunctionInput | KeyframeCreateOrConnectWithoutCubicBezierFunctionInput[]
    createMany?: KeyframeCreateManyCubicBezierFunctionInputEnvelope
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KeyframeUpdateManyWithoutCubicBezierFunctionNestedInput = {
    create?: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput> | KeyframeCreateWithoutCubicBezierFunctionInput[] | KeyframeUncheckedCreateWithoutCubicBezierFunctionInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutCubicBezierFunctionInput | KeyframeCreateOrConnectWithoutCubicBezierFunctionInput[]
    upsert?: KeyframeUpsertWithWhereUniqueWithoutCubicBezierFunctionInput | KeyframeUpsertWithWhereUniqueWithoutCubicBezierFunctionInput[]
    createMany?: KeyframeCreateManyCubicBezierFunctionInputEnvelope
    set?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    disconnect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    delete?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    update?: KeyframeUpdateWithWhereUniqueWithoutCubicBezierFunctionInput | KeyframeUpdateWithWhereUniqueWithoutCubicBezierFunctionInput[]
    updateMany?: KeyframeUpdateManyWithWhereWithoutCubicBezierFunctionInput | KeyframeUpdateManyWithWhereWithoutCubicBezierFunctionInput[]
    deleteMany?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KeyframeUncheckedUpdateManyWithoutCubicBezierFunctionNestedInput = {
    create?: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput> | KeyframeCreateWithoutCubicBezierFunctionInput[] | KeyframeUncheckedCreateWithoutCubicBezierFunctionInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutCubicBezierFunctionInput | KeyframeCreateOrConnectWithoutCubicBezierFunctionInput[]
    upsert?: KeyframeUpsertWithWhereUniqueWithoutCubicBezierFunctionInput | KeyframeUpsertWithWhereUniqueWithoutCubicBezierFunctionInput[]
    createMany?: KeyframeCreateManyCubicBezierFunctionInputEnvelope
    set?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    disconnect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    delete?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    update?: KeyframeUpdateWithWhereUniqueWithoutCubicBezierFunctionInput | KeyframeUpdateWithWhereUniqueWithoutCubicBezierFunctionInput[]
    updateMany?: KeyframeUpdateManyWithWhereWithoutCubicBezierFunctionInput | KeyframeUpdateManyWithWhereWithoutCubicBezierFunctionInput[]
    deleteMany?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
  }

  export type ParameterCreateNestedManyWithoutParameterTypeInput = {
    create?: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput> | ParameterCreateWithoutParameterTypeInput[] | ParameterUncheckedCreateWithoutParameterTypeInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutParameterTypeInput | ParameterCreateOrConnectWithoutParameterTypeInput[]
    createMany?: ParameterCreateManyParameterTypeInputEnvelope
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
  }

  export type ParameterUncheckedCreateNestedManyWithoutParameterTypeInput = {
    create?: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput> | ParameterCreateWithoutParameterTypeInput[] | ParameterUncheckedCreateWithoutParameterTypeInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutParameterTypeInput | ParameterCreateOrConnectWithoutParameterTypeInput[]
    createMany?: ParameterCreateManyParameterTypeInputEnvelope
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
  }

  export type ParameterUpdateManyWithoutParameterTypeNestedInput = {
    create?: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput> | ParameterCreateWithoutParameterTypeInput[] | ParameterUncheckedCreateWithoutParameterTypeInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutParameterTypeInput | ParameterCreateOrConnectWithoutParameterTypeInput[]
    upsert?: ParameterUpsertWithWhereUniqueWithoutParameterTypeInput | ParameterUpsertWithWhereUniqueWithoutParameterTypeInput[]
    createMany?: ParameterCreateManyParameterTypeInputEnvelope
    set?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    disconnect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    delete?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    update?: ParameterUpdateWithWhereUniqueWithoutParameterTypeInput | ParameterUpdateWithWhereUniqueWithoutParameterTypeInput[]
    updateMany?: ParameterUpdateManyWithWhereWithoutParameterTypeInput | ParameterUpdateManyWithWhereWithoutParameterTypeInput[]
    deleteMany?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
  }

  export type ParameterUncheckedUpdateManyWithoutParameterTypeNestedInput = {
    create?: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput> | ParameterCreateWithoutParameterTypeInput[] | ParameterUncheckedCreateWithoutParameterTypeInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutParameterTypeInput | ParameterCreateOrConnectWithoutParameterTypeInput[]
    upsert?: ParameterUpsertWithWhereUniqueWithoutParameterTypeInput | ParameterUpsertWithWhereUniqueWithoutParameterTypeInput[]
    createMany?: ParameterCreateManyParameterTypeInputEnvelope
    set?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    disconnect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    delete?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    update?: ParameterUpdateWithWhereUniqueWithoutParameterTypeInput | ParameterUpdateWithWhereUniqueWithoutParameterTypeInput[]
    updateMany?: ParameterUpdateManyWithWhereWithoutParameterTypeInput | ParameterUpdateManyWithWhereWithoutParameterTypeInput[]
    deleteMany?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
  }

  export type ParameterCreateNestedManyWithoutAnimationInput = {
    create?: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput> | ParameterCreateWithoutAnimationInput[] | ParameterUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutAnimationInput | ParameterCreateOrConnectWithoutAnimationInput[]
    createMany?: ParameterCreateManyAnimationInputEnvelope
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
  }

  export type KeyframeCreateNestedManyWithoutAnimationInput = {
    create?: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput> | KeyframeCreateWithoutAnimationInput[] | KeyframeUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutAnimationInput | KeyframeCreateOrConnectWithoutAnimationInput[]
    createMany?: KeyframeCreateManyAnimationInputEnvelope
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
  }

  export type ParameterUncheckedCreateNestedManyWithoutAnimationInput = {
    create?: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput> | ParameterCreateWithoutAnimationInput[] | ParameterUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutAnimationInput | ParameterCreateOrConnectWithoutAnimationInput[]
    createMany?: ParameterCreateManyAnimationInputEnvelope
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
  }

  export type KeyframeUncheckedCreateNestedManyWithoutAnimationInput = {
    create?: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput> | KeyframeCreateWithoutAnimationInput[] | KeyframeUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutAnimationInput | KeyframeCreateOrConnectWithoutAnimationInput[]
    createMany?: KeyframeCreateManyAnimationInputEnvelope
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
  }

  export type ParameterUpdateManyWithoutAnimationNestedInput = {
    create?: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput> | ParameterCreateWithoutAnimationInput[] | ParameterUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutAnimationInput | ParameterCreateOrConnectWithoutAnimationInput[]
    upsert?: ParameterUpsertWithWhereUniqueWithoutAnimationInput | ParameterUpsertWithWhereUniqueWithoutAnimationInput[]
    createMany?: ParameterCreateManyAnimationInputEnvelope
    set?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    disconnect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    delete?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    update?: ParameterUpdateWithWhereUniqueWithoutAnimationInput | ParameterUpdateWithWhereUniqueWithoutAnimationInput[]
    updateMany?: ParameterUpdateManyWithWhereWithoutAnimationInput | ParameterUpdateManyWithWhereWithoutAnimationInput[]
    deleteMany?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
  }

  export type KeyframeUpdateManyWithoutAnimationNestedInput = {
    create?: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput> | KeyframeCreateWithoutAnimationInput[] | KeyframeUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutAnimationInput | KeyframeCreateOrConnectWithoutAnimationInput[]
    upsert?: KeyframeUpsertWithWhereUniqueWithoutAnimationInput | KeyframeUpsertWithWhereUniqueWithoutAnimationInput[]
    createMany?: KeyframeCreateManyAnimationInputEnvelope
    set?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    disconnect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    delete?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    update?: KeyframeUpdateWithWhereUniqueWithoutAnimationInput | KeyframeUpdateWithWhereUniqueWithoutAnimationInput[]
    updateMany?: KeyframeUpdateManyWithWhereWithoutAnimationInput | KeyframeUpdateManyWithWhereWithoutAnimationInput[]
    deleteMany?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
  }

  export type ParameterUncheckedUpdateManyWithoutAnimationNestedInput = {
    create?: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput> | ParameterCreateWithoutAnimationInput[] | ParameterUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: ParameterCreateOrConnectWithoutAnimationInput | ParameterCreateOrConnectWithoutAnimationInput[]
    upsert?: ParameterUpsertWithWhereUniqueWithoutAnimationInput | ParameterUpsertWithWhereUniqueWithoutAnimationInput[]
    createMany?: ParameterCreateManyAnimationInputEnvelope
    set?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    disconnect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    delete?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    connect?: ParameterWhereUniqueInput | ParameterWhereUniqueInput[]
    update?: ParameterUpdateWithWhereUniqueWithoutAnimationInput | ParameterUpdateWithWhereUniqueWithoutAnimationInput[]
    updateMany?: ParameterUpdateManyWithWhereWithoutAnimationInput | ParameterUpdateManyWithWhereWithoutAnimationInput[]
    deleteMany?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
  }

  export type KeyframeUncheckedUpdateManyWithoutAnimationNestedInput = {
    create?: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput> | KeyframeCreateWithoutAnimationInput[] | KeyframeUncheckedCreateWithoutAnimationInput[]
    connectOrCreate?: KeyframeCreateOrConnectWithoutAnimationInput | KeyframeCreateOrConnectWithoutAnimationInput[]
    upsert?: KeyframeUpsertWithWhereUniqueWithoutAnimationInput | KeyframeUpsertWithWhereUniqueWithoutAnimationInput[]
    createMany?: KeyframeCreateManyAnimationInputEnvelope
    set?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    disconnect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    delete?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    connect?: KeyframeWhereUniqueInput | KeyframeWhereUniqueInput[]
    update?: KeyframeUpdateWithWhereUniqueWithoutAnimationInput | KeyframeUpdateWithWhereUniqueWithoutAnimationInput[]
    updateMany?: KeyframeUpdateManyWithWhereWithoutAnimationInput | KeyframeUpdateManyWithWhereWithoutAnimationInput[]
    deleteMany?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
  }

  export type ParameterTypeCreateNestedOneWithoutParametersInput = {
    create?: XOR<ParameterTypeCreateWithoutParametersInput, ParameterTypeUncheckedCreateWithoutParametersInput>
    connectOrCreate?: ParameterTypeCreateOrConnectWithoutParametersInput
    connect?: ParameterTypeWhereUniqueInput
  }

  export type AnimationCreateNestedOneWithoutParametersInput = {
    create?: XOR<AnimationCreateWithoutParametersInput, AnimationUncheckedCreateWithoutParametersInput>
    connectOrCreate?: AnimationCreateOrConnectWithoutParametersInput
    connect?: AnimationWhereUniqueInput
  }

  export type ParameterTypeUpdateOneRequiredWithoutParametersNestedInput = {
    create?: XOR<ParameterTypeCreateWithoutParametersInput, ParameterTypeUncheckedCreateWithoutParametersInput>
    connectOrCreate?: ParameterTypeCreateOrConnectWithoutParametersInput
    upsert?: ParameterTypeUpsertWithoutParametersInput
    connect?: ParameterTypeWhereUniqueInput
    update?: XOR<XOR<ParameterTypeUpdateToOneWithWhereWithoutParametersInput, ParameterTypeUpdateWithoutParametersInput>, ParameterTypeUncheckedUpdateWithoutParametersInput>
  }

  export type AnimationUpdateOneRequiredWithoutParametersNestedInput = {
    create?: XOR<AnimationCreateWithoutParametersInput, AnimationUncheckedCreateWithoutParametersInput>
    connectOrCreate?: AnimationCreateOrConnectWithoutParametersInput
    upsert?: AnimationUpsertWithoutParametersInput
    connect?: AnimationWhereUniqueInput
    update?: XOR<XOR<AnimationUpdateToOneWithWhereWithoutParametersInput, AnimationUpdateWithoutParametersInput>, AnimationUncheckedUpdateWithoutParametersInput>
  }

  export type AnimationCreateNestedOneWithoutKeyframesInput = {
    create?: XOR<AnimationCreateWithoutKeyframesInput, AnimationUncheckedCreateWithoutKeyframesInput>
    connectOrCreate?: AnimationCreateOrConnectWithoutKeyframesInput
    connect?: AnimationWhereUniqueInput
  }

  export type CubicBezierFunctionCreateNestedOneWithoutKeyframesInput = {
    create?: XOR<CubicBezierFunctionCreateWithoutKeyframesInput, CubicBezierFunctionUncheckedCreateWithoutKeyframesInput>
    connectOrCreate?: CubicBezierFunctionCreateOrConnectWithoutKeyframesInput
    connect?: CubicBezierFunctionWhereUniqueInput
  }

  export type AnimationUpdateOneRequiredWithoutKeyframesNestedInput = {
    create?: XOR<AnimationCreateWithoutKeyframesInput, AnimationUncheckedCreateWithoutKeyframesInput>
    connectOrCreate?: AnimationCreateOrConnectWithoutKeyframesInput
    upsert?: AnimationUpsertWithoutKeyframesInput
    connect?: AnimationWhereUniqueInput
    update?: XOR<XOR<AnimationUpdateToOneWithWhereWithoutKeyframesInput, AnimationUpdateWithoutKeyframesInput>, AnimationUncheckedUpdateWithoutKeyframesInput>
  }

  export type CubicBezierFunctionUpdateOneRequiredWithoutKeyframesNestedInput = {
    create?: XOR<CubicBezierFunctionCreateWithoutKeyframesInput, CubicBezierFunctionUncheckedCreateWithoutKeyframesInput>
    connectOrCreate?: CubicBezierFunctionCreateOrConnectWithoutKeyframesInput
    upsert?: CubicBezierFunctionUpsertWithoutKeyframesInput
    connect?: CubicBezierFunctionWhereUniqueInput
    update?: XOR<XOR<CubicBezierFunctionUpdateToOneWithWhereWithoutKeyframesInput, CubicBezierFunctionUpdateWithoutKeyframesInput>, CubicBezierFunctionUncheckedUpdateWithoutKeyframesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type KeyframeCreateWithoutCubicBezierFunctionInput = {
    animation: AnimationCreateNestedOneWithoutKeyframesInput
  }

  export type KeyframeUncheckedCreateWithoutCubicBezierFunctionInput = {
    id?: number
    animationId: number
  }

  export type KeyframeCreateOrConnectWithoutCubicBezierFunctionInput = {
    where: KeyframeWhereUniqueInput
    create: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput>
  }

  export type KeyframeCreateManyCubicBezierFunctionInputEnvelope = {
    data: KeyframeCreateManyCubicBezierFunctionInput | KeyframeCreateManyCubicBezierFunctionInput[]
    skipDuplicates?: boolean
  }

  export type KeyframeUpsertWithWhereUniqueWithoutCubicBezierFunctionInput = {
    where: KeyframeWhereUniqueInput
    update: XOR<KeyframeUpdateWithoutCubicBezierFunctionInput, KeyframeUncheckedUpdateWithoutCubicBezierFunctionInput>
    create: XOR<KeyframeCreateWithoutCubicBezierFunctionInput, KeyframeUncheckedCreateWithoutCubicBezierFunctionInput>
  }

  export type KeyframeUpdateWithWhereUniqueWithoutCubicBezierFunctionInput = {
    where: KeyframeWhereUniqueInput
    data: XOR<KeyframeUpdateWithoutCubicBezierFunctionInput, KeyframeUncheckedUpdateWithoutCubicBezierFunctionInput>
  }

  export type KeyframeUpdateManyWithWhereWithoutCubicBezierFunctionInput = {
    where: KeyframeScalarWhereInput
    data: XOR<KeyframeUpdateManyMutationInput, KeyframeUncheckedUpdateManyWithoutCubicBezierFunctionInput>
  }

  export type KeyframeScalarWhereInput = {
    AND?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
    OR?: KeyframeScalarWhereInput[]
    NOT?: KeyframeScalarWhereInput | KeyframeScalarWhereInput[]
    id?: IntFilter<"Keyframe"> | number
    animationId?: IntFilter<"Keyframe"> | number
    cubicBezierFunctionId?: IntFilter<"Keyframe"> | number
  }

  export type ParameterCreateWithoutParameterTypeInput = {
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
    animation: AnimationCreateNestedOneWithoutParametersInput
  }

  export type ParameterUncheckedCreateWithoutParameterTypeInput = {
    id?: number
    animationId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type ParameterCreateOrConnectWithoutParameterTypeInput = {
    where: ParameterWhereUniqueInput
    create: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput>
  }

  export type ParameterCreateManyParameterTypeInputEnvelope = {
    data: ParameterCreateManyParameterTypeInput | ParameterCreateManyParameterTypeInput[]
    skipDuplicates?: boolean
  }

  export type ParameterUpsertWithWhereUniqueWithoutParameterTypeInput = {
    where: ParameterWhereUniqueInput
    update: XOR<ParameterUpdateWithoutParameterTypeInput, ParameterUncheckedUpdateWithoutParameterTypeInput>
    create: XOR<ParameterCreateWithoutParameterTypeInput, ParameterUncheckedCreateWithoutParameterTypeInput>
  }

  export type ParameterUpdateWithWhereUniqueWithoutParameterTypeInput = {
    where: ParameterWhereUniqueInput
    data: XOR<ParameterUpdateWithoutParameterTypeInput, ParameterUncheckedUpdateWithoutParameterTypeInput>
  }

  export type ParameterUpdateManyWithWhereWithoutParameterTypeInput = {
    where: ParameterScalarWhereInput
    data: XOR<ParameterUpdateManyMutationInput, ParameterUncheckedUpdateManyWithoutParameterTypeInput>
  }

  export type ParameterScalarWhereInput = {
    AND?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
    OR?: ParameterScalarWhereInput[]
    NOT?: ParameterScalarWhereInput | ParameterScalarWhereInput[]
    id?: IntFilter<"Parameter"> | number
    parameterTypeId?: IntFilter<"Parameter"> | number
    animationId?: IntFilter<"Parameter"> | number
    name?: StringFilter<"Parameter"> | string
    variableName?: StringFilter<"Parameter"> | string
    presetValue?: FloatFilter<"Parameter"> | number
    minValue?: FloatFilter<"Parameter"> | number
    maxValue?: FloatFilter<"Parameter"> | number
  }

  export type ParameterCreateWithoutAnimationInput = {
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
    parameterType: ParameterTypeCreateNestedOneWithoutParametersInput
  }

  export type ParameterUncheckedCreateWithoutAnimationInput = {
    id?: number
    parameterTypeId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type ParameterCreateOrConnectWithoutAnimationInput = {
    where: ParameterWhereUniqueInput
    create: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput>
  }

  export type ParameterCreateManyAnimationInputEnvelope = {
    data: ParameterCreateManyAnimationInput | ParameterCreateManyAnimationInput[]
    skipDuplicates?: boolean
  }

  export type KeyframeCreateWithoutAnimationInput = {
    cubicBezierFunction: CubicBezierFunctionCreateNestedOneWithoutKeyframesInput
  }

  export type KeyframeUncheckedCreateWithoutAnimationInput = {
    id?: number
    cubicBezierFunctionId: number
  }

  export type KeyframeCreateOrConnectWithoutAnimationInput = {
    where: KeyframeWhereUniqueInput
    create: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput>
  }

  export type KeyframeCreateManyAnimationInputEnvelope = {
    data: KeyframeCreateManyAnimationInput | KeyframeCreateManyAnimationInput[]
    skipDuplicates?: boolean
  }

  export type ParameterUpsertWithWhereUniqueWithoutAnimationInput = {
    where: ParameterWhereUniqueInput
    update: XOR<ParameterUpdateWithoutAnimationInput, ParameterUncheckedUpdateWithoutAnimationInput>
    create: XOR<ParameterCreateWithoutAnimationInput, ParameterUncheckedCreateWithoutAnimationInput>
  }

  export type ParameterUpdateWithWhereUniqueWithoutAnimationInput = {
    where: ParameterWhereUniqueInput
    data: XOR<ParameterUpdateWithoutAnimationInput, ParameterUncheckedUpdateWithoutAnimationInput>
  }

  export type ParameterUpdateManyWithWhereWithoutAnimationInput = {
    where: ParameterScalarWhereInput
    data: XOR<ParameterUpdateManyMutationInput, ParameterUncheckedUpdateManyWithoutAnimationInput>
  }

  export type KeyframeUpsertWithWhereUniqueWithoutAnimationInput = {
    where: KeyframeWhereUniqueInput
    update: XOR<KeyframeUpdateWithoutAnimationInput, KeyframeUncheckedUpdateWithoutAnimationInput>
    create: XOR<KeyframeCreateWithoutAnimationInput, KeyframeUncheckedCreateWithoutAnimationInput>
  }

  export type KeyframeUpdateWithWhereUniqueWithoutAnimationInput = {
    where: KeyframeWhereUniqueInput
    data: XOR<KeyframeUpdateWithoutAnimationInput, KeyframeUncheckedUpdateWithoutAnimationInput>
  }

  export type KeyframeUpdateManyWithWhereWithoutAnimationInput = {
    where: KeyframeScalarWhereInput
    data: XOR<KeyframeUpdateManyMutationInput, KeyframeUncheckedUpdateManyWithoutAnimationInput>
  }

  export type ParameterTypeCreateWithoutParametersInput = {
    name: string
    cssSuffix: string
  }

  export type ParameterTypeUncheckedCreateWithoutParametersInput = {
    id?: number
    name: string
    cssSuffix: string
  }

  export type ParameterTypeCreateOrConnectWithoutParametersInput = {
    where: ParameterTypeWhereUniqueInput
    create: XOR<ParameterTypeCreateWithoutParametersInput, ParameterTypeUncheckedCreateWithoutParametersInput>
  }

  export type AnimationCreateWithoutParametersInput = {
    name: string
    description: string
    keyframes?: KeyframeCreateNestedManyWithoutAnimationInput
  }

  export type AnimationUncheckedCreateWithoutParametersInput = {
    id?: number
    name: string
    description: string
    keyframes?: KeyframeUncheckedCreateNestedManyWithoutAnimationInput
  }

  export type AnimationCreateOrConnectWithoutParametersInput = {
    where: AnimationWhereUniqueInput
    create: XOR<AnimationCreateWithoutParametersInput, AnimationUncheckedCreateWithoutParametersInput>
  }

  export type ParameterTypeUpsertWithoutParametersInput = {
    update: XOR<ParameterTypeUpdateWithoutParametersInput, ParameterTypeUncheckedUpdateWithoutParametersInput>
    create: XOR<ParameterTypeCreateWithoutParametersInput, ParameterTypeUncheckedCreateWithoutParametersInput>
    where?: ParameterTypeWhereInput
  }

  export type ParameterTypeUpdateToOneWithWhereWithoutParametersInput = {
    where?: ParameterTypeWhereInput
    data: XOR<ParameterTypeUpdateWithoutParametersInput, ParameterTypeUncheckedUpdateWithoutParametersInput>
  }

  export type ParameterTypeUpdateWithoutParametersInput = {
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
  }

  export type ParameterTypeUncheckedUpdateWithoutParametersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cssSuffix?: StringFieldUpdateOperationsInput | string
  }

  export type AnimationUpsertWithoutParametersInput = {
    update: XOR<AnimationUpdateWithoutParametersInput, AnimationUncheckedUpdateWithoutParametersInput>
    create: XOR<AnimationCreateWithoutParametersInput, AnimationUncheckedCreateWithoutParametersInput>
    where?: AnimationWhereInput
  }

  export type AnimationUpdateToOneWithWhereWithoutParametersInput = {
    where?: AnimationWhereInput
    data: XOR<AnimationUpdateWithoutParametersInput, AnimationUncheckedUpdateWithoutParametersInput>
  }

  export type AnimationUpdateWithoutParametersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keyframes?: KeyframeUpdateManyWithoutAnimationNestedInput
  }

  export type AnimationUncheckedUpdateWithoutParametersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keyframes?: KeyframeUncheckedUpdateManyWithoutAnimationNestedInput
  }

  export type AnimationCreateWithoutKeyframesInput = {
    name: string
    description: string
    parameters?: ParameterCreateNestedManyWithoutAnimationInput
  }

  export type AnimationUncheckedCreateWithoutKeyframesInput = {
    id?: number
    name: string
    description: string
    parameters?: ParameterUncheckedCreateNestedManyWithoutAnimationInput
  }

  export type AnimationCreateOrConnectWithoutKeyframesInput = {
    where: AnimationWhereUniqueInput
    create: XOR<AnimationCreateWithoutKeyframesInput, AnimationUncheckedCreateWithoutKeyframesInput>
  }

  export type CubicBezierFunctionCreateWithoutKeyframesInput = {
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
  }

  export type CubicBezierFunctionUncheckedCreateWithoutKeyframesInput = {
    id?: number
    name: string
    x1: number
    y1: number
    x2: number
    y2: number
  }

  export type CubicBezierFunctionCreateOrConnectWithoutKeyframesInput = {
    where: CubicBezierFunctionWhereUniqueInput
    create: XOR<CubicBezierFunctionCreateWithoutKeyframesInput, CubicBezierFunctionUncheckedCreateWithoutKeyframesInput>
  }

  export type AnimationUpsertWithoutKeyframesInput = {
    update: XOR<AnimationUpdateWithoutKeyframesInput, AnimationUncheckedUpdateWithoutKeyframesInput>
    create: XOR<AnimationCreateWithoutKeyframesInput, AnimationUncheckedCreateWithoutKeyframesInput>
    where?: AnimationWhereInput
  }

  export type AnimationUpdateToOneWithWhereWithoutKeyframesInput = {
    where?: AnimationWhereInput
    data: XOR<AnimationUpdateWithoutKeyframesInput, AnimationUncheckedUpdateWithoutKeyframesInput>
  }

  export type AnimationUpdateWithoutKeyframesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUpdateManyWithoutAnimationNestedInput
  }

  export type AnimationUncheckedUpdateWithoutKeyframesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: ParameterUncheckedUpdateManyWithoutAnimationNestedInput
  }

  export type CubicBezierFunctionUpsertWithoutKeyframesInput = {
    update: XOR<CubicBezierFunctionUpdateWithoutKeyframesInput, CubicBezierFunctionUncheckedUpdateWithoutKeyframesInput>
    create: XOR<CubicBezierFunctionCreateWithoutKeyframesInput, CubicBezierFunctionUncheckedCreateWithoutKeyframesInput>
    where?: CubicBezierFunctionWhereInput
  }

  export type CubicBezierFunctionUpdateToOneWithWhereWithoutKeyframesInput = {
    where?: CubicBezierFunctionWhereInput
    data: XOR<CubicBezierFunctionUpdateWithoutKeyframesInput, CubicBezierFunctionUncheckedUpdateWithoutKeyframesInput>
  }

  export type CubicBezierFunctionUpdateWithoutKeyframesInput = {
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
  }

  export type CubicBezierFunctionUncheckedUpdateWithoutKeyframesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    x1?: FloatFieldUpdateOperationsInput | number
    y1?: FloatFieldUpdateOperationsInput | number
    x2?: FloatFieldUpdateOperationsInput | number
    y2?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyframeCreateManyCubicBezierFunctionInput = {
    id?: number
    animationId: number
  }

  export type KeyframeUpdateWithoutCubicBezierFunctionInput = {
    animation?: AnimationUpdateOneRequiredWithoutKeyframesNestedInput
  }

  export type KeyframeUncheckedUpdateWithoutCubicBezierFunctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
  }

  export type KeyframeUncheckedUpdateManyWithoutCubicBezierFunctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
  }

  export type ParameterCreateManyParameterTypeInput = {
    id?: number
    animationId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type ParameterUpdateWithoutParameterTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
    animation?: AnimationUpdateOneRequiredWithoutParametersNestedInput
  }

  export type ParameterUncheckedUpdateWithoutParameterTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type ParameterUncheckedUpdateManyWithoutParameterTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    animationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type ParameterCreateManyAnimationInput = {
    id?: number
    parameterTypeId: number
    name: string
    variableName: string
    presetValue: number
    minValue: number
    maxValue: number
  }

  export type KeyframeCreateManyAnimationInput = {
    id?: number
    cubicBezierFunctionId: number
  }

  export type ParameterUpdateWithoutAnimationInput = {
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
    parameterType?: ParameterTypeUpdateOneRequiredWithoutParametersNestedInput
  }

  export type ParameterUncheckedUpdateWithoutAnimationInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type ParameterUncheckedUpdateManyWithoutAnimationInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    variableName?: StringFieldUpdateOperationsInput | string
    presetValue?: FloatFieldUpdateOperationsInput | number
    minValue?: FloatFieldUpdateOperationsInput | number
    maxValue?: FloatFieldUpdateOperationsInput | number
  }

  export type KeyframeUpdateWithoutAnimationInput = {
    cubicBezierFunction?: CubicBezierFunctionUpdateOneRequiredWithoutKeyframesNestedInput
  }

  export type KeyframeUncheckedUpdateWithoutAnimationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cubicBezierFunctionId?: IntFieldUpdateOperationsInput | number
  }

  export type KeyframeUncheckedUpdateManyWithoutAnimationInput = {
    id?: IntFieldUpdateOperationsInput | number
    cubicBezierFunctionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CubicBezierFunctionCountOutputTypeDefaultArgs instead
     */
    export type CubicBezierFunctionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CubicBezierFunctionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParameterTypeCountOutputTypeDefaultArgs instead
     */
    export type ParameterTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParameterTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnimationCountOutputTypeDefaultArgs instead
     */
    export type AnimationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnimationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CubicBezierFunctionDefaultArgs instead
     */
    export type CubicBezierFunctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CubicBezierFunctionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnimationDirectionDefaultArgs instead
     */
    export type AnimationDirectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnimationDirectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParameterTypeDefaultArgs instead
     */
    export type ParameterTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParameterTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnimationDefaultArgs instead
     */
    export type AnimationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnimationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParameterDefaultArgs instead
     */
    export type ParameterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParameterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeyframeDefaultArgs instead
     */
    export type KeyframeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeyframeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}